<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:views="views.*" width="1000" height="1000" clipContent="false" creationComplete="onCreationComplete()" verticalScrollPolicy="off" horizontalScrollPolicy="off">	
	<mx:Script>
		<![CDATA[
			import controllers.CreatureController;
			import controllers.DwellingController;
			import controllers.LayerableController;
			import controllers.LevelController;
			import controllers.SongController;
			import controllers.StoreController;
			import controllers.StructureController;
			import controllers.ThingerController;
			import controllers.UserController;
			
			import flash.utils.getDefinitionByName;
			import flash.utils.getQualifiedClassName;
			import flash.utils.getTimer;
			
			import flashx.textLayout.container.ScrollPolicy;
			
			import game.GameClock;
			import game.GameMagicManager;
			
			import helpers.CreatureGenerator;
			
			import models.Creature;
			import models.EssentialModelReference;
			import models.OwnedDwelling;
			import models.OwnedLayerable;
			import models.OwnedStructure;
			import models.OwnedThinger;
			import models.Store;
			import models.StoreOwnedThinger;
			import models.Structure;
			import models.Thinger;
			import models.User;
			
			import mx.collections.ArrayCollection;
			import mx.containers.Canvas;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.controls.Text;
			import mx.core.Application;
			import mx.core.DragSource;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			import mx.managers.DragManager;
			import mx.states.AddChild;
			
			import rock_on.BandMember;
			import rock_on.BandMemberManager;
			import rock_on.Booth;
			import rock_on.BoothBoss;
			import rock_on.ConcertStage;
			import rock_on.CustomerPerson;
			import rock_on.CustomerPersonManager;
			import rock_on.GroupieBoss;
			import rock_on.ListeningStation;
			import rock_on.ListeningStationBoss;
			import rock_on.PasserbyManager;
			import rock_on.Person;
			import rock_on.Promoter;
			import rock_on.PromoterManager;
			import rock_on.StageManager;
			
			import stores.StoreEvent;
			
			import user.UserEvent;
			
			import world.ActiveAsset;
			import world.AssetGenius;
			import world.AssetStack;
			import world.BitmapBlotter;
			import world.Point3D;
			import world.World;
			import world.WorldEvent;	
			
			public var myWorld:World;
			[Bindable] public var myUser:User;
			
			public static const PERSON_SPEED:Number = 0.07;
			public static const WINDOW_WIDTH:int = 1000;
			public static const WINDOW_HEIGHT:int = 1000;
			
			public static var worldWidth:int = 1200;
			public static var worldHeight:int = 1200;
			public static var tileSize:int = 40;
			
			public var stageView:StageView;
			[Bindable] public var bitmapLayer:Bitmap;
			public var backgroundRect:Rectangle;
			public var backgroundPoint:Point;
			[Bindable] public var bitmapBlotter:BitmapBlotter;
			public var backgroundCanvas:Canvas;
			public var bottomBar:BottomBar;
			public var assetGenius:AssetGenius;
			public var inventoryCanvas:Canvas;
			public var inventoryIndex:int = 0;
			public var uiLayer:UILayer;
			public var editMode:EditMode;
			public var editModeActivated:Boolean = false;
			public var booths:ArrayCollection;
			public var stages:ArrayCollection;
			[Bindable] public var customerPersonManager:CustomerPersonManager;
			[Bindable] public var bandBoss:BandBoss;
			[Bindable] public var concertStage:ConcertStage;
			[Bindable] public var listeningStationBoss:ListeningStationBoss;
			[Bindable] public var groupieBoss:GroupieBoss;
			[Bindable] public var venueManager:VenueManager;
			[Bindable] public var boothBoss:BoothBoss;
			[Bindable] public var stageManager:StageManager;
			public var creatureGenerator:CreatureGenerator;
			public var creditsBox:Text;
			public var myStage:World;
			public var creaturesAdded:Boolean;
			public var wbi:WorldBitmapInterface;
			
			[Bindable] public var gameMagicManager:GameMagicManager;			
			[Bindable] public var layerableController:LayerableController;
			[Bindable] public var structureController:StructureController;
			[Bindable] public var storeController:StoreController;
			[Bindable] public var creatureController:CreatureController;
			[Bindable] public var thingerController:ThingerController;
			[Bindable] public var userController:UserController;
			[Bindable] public var dwellingController:DwellingController;
			[Bindable] public var levelController:LevelController;
			[Bindable] public var songController:SongController;
			
			[Bindable] public var myMemory:Number;
			[Bindable] public var fps:Number;
			[Bindable] public var aux:Number;	
			public var lastTime:Number;	
			
			public var isDragging:Boolean;
			public var cursorUIC:ContainerUIC;
			public var mouseIncrementX:Number;
			public var mouseIncrementY:Number;
			
			private function onCreationComplete():void
			{
				addEventListener(Event.ENTER_FRAME, onEnterFrame);
				addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);	
				addEventListener(MouseEvent.CLICK, onViewClicked);
			}
			
			private function onViewClicked(evt:MouseEvent):void
			{
				wbi.onWorldViewClicked(evt);
			}
			
			public function initializeWorld():void
			{
				addWorld();	
				var evt:DynamicEvent = new DynamicEvent("worldAdded", true, true);
				dispatchEvent(evt);
			}
			
			public function initializeVenue():void
			{
				venueManager = new VenueManager(wbi, structureController, layerableController, dwellingController, levelController, creatureController, myWorld);
				venueManager.getVenue();
			}
			
			public function initializeStructures():void
			{
				venueManager.updateWorld(myWorld, bitmapBlotter);
				venueManager.venue.addStaticStuffToVenue();				
			}
			
			public function initializeCreatures():void
			{
				checkForCreaturesAdded();				
			}
			
			private function checkForCreaturesAdded():void
			{
				if (creaturesAdded)
				{
					venueManager.venue.addMovingStuffToVenue();
				}
				else
				{
					creaturesAdded = true;	
				}				
			}
			
			private function onAssetsDrawn(evt:WorldEvent):void
			{
				checkForCreaturesAdded();
			}
			
			private function onMouseDown(evt:MouseEvent):void
			{
				wbi.onMouseDown(evt);
			}
			
			public function addBackgroundLayer():void
			{
				var relWidth:Number = myWorld.wg.getRect(myWorld).width;
				var relHeight:Number = myWorld.wg.getRect(myWorld).height;
				bitmapBlotter = new BitmapBlotter(relWidth, relHeight, true, 0x00000000);
				wbi.bitmapBlotter = bitmapBlotter;
				bitmapBlotter.myWorld = myWorld;
				bitmapBlotter.incrementX = (width - relWidth)/2;
				bitmapBlotter.incrementY = (height - relHeight)/2;
				bitmapBlotter.relWidth = relWidth;
				bitmapBlotter.relHeight = relHeight;
				myWorld.bitmapBlotter = bitmapBlotter;
				bitmapLayer = new Bitmap(bitmapBlotter);
				bitmapLayer.opaqueBackground = null;
				bitmapLayer.width = relWidth;
				bitmapLayer.height = relHeight;
				bitmapLayer.bitmapData = bitmapBlotter;
				backgroundCanvas = new Canvas();
				wbi.backgroundCanvas = backgroundCanvas;
				backgroundCanvas.width = relWidth;
				backgroundCanvas.height = relHeight;
				backgroundCanvas.clipContent = false;
				backgroundCanvas.x = (width - relWidth)/2;
				backgroundCanvas.y = (height - relHeight)/2;
				backgroundCanvas.setStyle("backgroundAlpha", 0);
				bitmapBlotter.backgroundCanvas = backgroundCanvas;
				
				addChild(backgroundCanvas);
				backgroundCanvas.cachePolicy = "on";
				backgroundCanvas.nestLevel = 2;				
			}
			
			public function addWorld():void
			{
				myWorld = new World(worldWidth, worldHeight, tileSize, concertStage.structure.height);	
				myWorld.nestLevel = 3;
				addBackgroundLayer();
				addChild(myWorld);	
				myWorld.assetRenderer.addEventListener(WorldEvent.ASSETS_DRAWN, onAssetsDrawn);
			}
			
			private function onEnterFrame(evt:Event):void
			{
				var time:Number = getTimer();
				var deltaTime:Number = time - lastTime;
				var lockedDelta:Number = Math.min(100, deltaTime);
				fps = 1000/deltaTime;
				myMemory = System.totalMemory;
				lastTime = time;
				
				if (wbi)
				{
					wbi.handleEnterFrameEvents();			
				}
				if (venueManager)
				{
					venueManager.update(lockedDelta);				
				}
			}
			
			private function onStructurePlaced(evt:DynamicEvent):void
			{
				thingerController.saveStructurePlacement(evt.asset, evt.currentPoint);
			}
			
			private function onWorldClicked(evt:MouseEvent):void
			{
				if (evt.target is BandMember)
				{
					showCustomizer((evt.target as ActiveAsset).thinger as Creature);
				}
				else if (evt.target is CustomerPerson)
				{
					if (((evt.target as ActiveAsset).thinger as Creature).type == "Groupie")
					{
						Alert.show("I'm a Groupie!");
					}
					else 
					{
						Alert.show("Not a Groupie!");
					}
				}
				else
				{
					if (editMode.locked == false)
					{
						editMode.onWorldClicked(evt);					
					}
				}
			}
			
			public function createStage():void
			{
				stageManager = new StageManager(structureController, myStage);
				stageManager.createStage();
				concertStage = stageManager.concertStage;
			}
			
			public function boothPlaced():void
			{
				boothBoss.reInitializeBooths(true);
			}
			
			public function showCustomizer(creature:Creature):void
			{
				parentApplication.onCreatureToCustomize(creature);
			}
			
			public function updateRenderedStructures(os:OwnedStructure, method:String):void
			{
				if (isValidWorldStructure(os))
				{
					var asset:ActiveAsset = myWorld.findAssetByThinger(os);
					if (asset && method == "sell")
					{
						myWorld.assetRenderer.removeAsset(asset);
						reInitializeStructures(os);					
					}
					if (asset && method == "save_placement")
					{
						myWorld.updateAssetCoords(asset, new Point3D(os.x, os.y, os.z), true);
						reInitializeStructures(os);					
					}
					if (method == "create_new")
					{
						addNewOwnedStructure(os);
					}
				}
			}
			
			public function isValidWorldStructure(os:OwnedStructure):Boolean
			{
				if (os.structure.structure_type == "Booth" || os.structure.structure_type == "ListeningStation")
				{
					return true;
				}
				return false;
			}
			
			public function addNewOwnedStructure(os:OwnedStructure):void
			{
				var mc:MovieClip = EssentialModelReference.getMovieClipCopy(os.structure.mc);
				var asset:ActiveAsset = new ActiveAsset(mc);
				var addTo:Point3D = new Point3D(os.x, os.y, os.z);					
				myWorld.addStaticAsset(asset, addTo);
				reInitializeStructures(os);					
			}
			
			public function reInitializeStructures(os:OwnedStructure):void
			{				
				if (os.structure.structure_type == "Booth")
				{
					boothBoss.reInitializeBooths(true);
					customerPersonManager.redrawAllCustomers();
					this.bitmapBlotter.renderReplacedBitmaps();
				}
				else if (os.structure.structure_type == "ListeningStation")
				{
					listeningStationBoss.reInitializeListeningStations();				
				}
			}
			
		]]>
	</mx:Script>	
</mx:Canvas>
