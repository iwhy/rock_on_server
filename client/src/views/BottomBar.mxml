<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="760" height="100" clipContent="false" creationComplete="onCreationComplete()">
	<mx:Script>
		<![CDATA[
			import com.facebook.commands.events.CancelEvent;
			import com.facebook.data.users.FacebookUser;
			
			import controllers.FriendManager;
			import controllers.LevelManager;
			import controllers.StoreManager;
			import controllers.ThingerManager;
			import controllers.UserManager;
			
			import customizer.CustomizerEvent;
			
			import facebook.FacebookFunTime;
			
			import game.GameDataInterface;
			
			import helpers.CreatureEvent;
			
			import models.Creature;
			import models.Level;
			import models.Store;
			import models.User;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.containers.HBox;
			import mx.containers.VBox;
			import mx.controls.Button;
			import mx.controls.Image;
			import mx.controls.Label;
			import mx.controls.Text;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.CollectionEvent;
			import mx.events.DynamicEvent;
			
			import stores.StoreEvent;
			
			import world.ActiveAsset;
			import world.AssetStack;
			import world.World;
			import world.WorldEvent;		
			public var myWorld:World;
			[Bindable] public var myUser:User;
			
			public var inventoryCanvas:Canvas;
			public var creatureCanvas:Canvas;
			public var displayedCreatureInfo:Canvas;
			public var displayedCreatureUIC:ContainerUIC;
			public var inventoryIndex:int = 0;
			public var tabCanvas:HBox;
			public var worldView:WorldView;
			public var editView:EditView;			
			[Bindable] public var facebookFriends:Array;
			[Bindable] public var facebookUser:FacebookUser;
			
			[Bindable] public var storeManager:StoreManager;
			[Bindable] public var thingerManager:ThingerManager;
			[Bindable] public var userManager:UserManager;
			[Bindable] public var friendManager:FriendManager;
			[Bindable] public var levelManager:LevelManager;
			
			public static const USER_PIC_DIMENSION:int = 92;
			public static const FRIEND_PIC_DIMENSION:int = 50;
			
			[Embed(source="../libs/icons/musicnotes.png")]
			public var musicBtnClass:Class;
			[Embed(source="../libs/icons/arrow.png")]
			public var arrowBtnClass:Class;
			[Embed(source="../libs/icons/hamburger.png")]
			public var hamburgerBtnClass:Class;
			[Embed(source="../libs/icons/microphone.png")]
			public var microphoneBtnClass:Class;
			[Embed(source="../libs/icons/store.png")]
			public var storeBtnClass:Class;
			[Embed(source="../libs/icons/guitar.png")]
			public var guitarBtnClass:Class;
			[Embed(source="../libs/icons/heart.png")]
			public var heartBtnClass:Class;
			[Embed(source="../libs/icons/pizza.png")]
			public var pizzaBtnClass:Class;
			[Embed(source="../libs/icons/headphones_small.png")]
			public var smallHeadphonesIconClass:Class;
			[Embed(source="../libs/icons/heart_small.png")]
			public var smallHeartIconClass:Class;
			[Embed(source="../libs/icons/guitar_small.png")]
			public var smallGuitarIconClass:Class;
			[Embed(source="../libs/icons/coffee_small.png")]
			public var smallCoffeeIconClass:Class;
			[Embed(source="../libs/icons/pizza_small.png")]
			public var smallPizzaIconClass:Class;
			[Embed(source="../libs/icons/musicnotes_small.png")]
			public var smallMusicNotesIconClass:Class;
			[Embed(source="../libs/icons/arrow_right_small.png")]
			public var arrowScrollerRight:Class;
			[Embed(source="../libs/icons/arrow_left_small.png")]
			public var arrowScrollerLeft:Class;
			[Embed(source="../libs/icons/smiley_green.png")]
			public var smileGreenClass:Class;
			[Embed(source="../libs/icons/star_unfilled_small.png")]
			public var starUnfilled:Class;
			[Embed(source="../libs/icons/star_filled_small.png")]
			public var starFilled:Class;
			[Embed(source="../libs/icons/hamburger_button.png")]
			public var hamburgerButton:Class;
			[Embed(source="../libs/icons/heart_button.png")]
			public var heartButton:Class;
			[Embed(source="../libs/icons/musicnotes_button.png")]
			public var musicNotesButton:Class;
			[Embed(source="../libs/icons/guitar_button.png")]
			public var guitarButton:Class;
			[Embed(source="../libs/icons/filler_green.png")]
			public var fillerGreenClass:Class;
			[Embed(source="../libs/icons/filler_green_empty.png")]
			public var fillerGreenEmptyClass:Class;
			[Embed(source="../libs/icons/filler_yellow.png")]
			public var fillerYellowClass:Class;
			[Embed(source="../libs/icons/filler_yellow_empty.png")]
			public var fillerYellowEmptyClass:Class;
			[Embed(source="../libs/icons/filler_red.png")]
			public var fillerRedClass:Class;
			[Embed(source="../libs/icons/filler_red_empty.png")]
			public var fillerRedEmptyClass:Class;
			[Embed(source="../libs/icons/star_filled_blue.png")]
			public var starBlueFilled:Class;
			[Embed(source="../libs/icons/star_unfilled_blue.png")]
			public var starBlueUnfilled:Class;
			

			private function onCreationComplete():void
			{		
				createBackCanvas();					
				createTabCanvas();
				createInventoryCanvas();
				addTabs();			
				
				width = 760;
//				addEventListener("facebookDataLoaded", onFriendDataLoaded);
				addEventListener(CreatureEvent.CREATURE_CLICKED, onCreatureClicked);
				addEventListener(MouseEvent.CLICK, onBottomBarClicked);
			}		
		
			public function onUserLoaded():void
			{
				myUser.addEventListener(StoreEvent.THINGER_PURCHASED, onThingerPurchased);	
				onUserAndFriendsLoaded();
			}
			
			public function onUserAndFriendsLoaded():void
			{
				if (parentApplication.userLoaded && parentApplication.friendsLoaded)
				{
					showFacebookFriends();	
					showInitialCreature();			
				}
			}
			
			public function showInitialCreature():void
			{
				var uic:ContainerUIC = getBandMember(friendManager.mainGDI, 0.55);
				setDisplayedCreatureDimensions(uic);
				displayCreatureInfo((uic.thinger as AssetStack).creature);
				addChild(uic);					
			}
			
			public function onCreatureClicked(evt:CreatureEvent):void
			{
				replaceCreature(evt.asset.creature);
			}
			
			public function setDisplayedCreatureDimensions(uic:ContainerUIC):void
			{
				uic.x = width/2 - 327;
				uic.y = inventoryCanvas.y + 86;
				var asset:AssetStack = uic.thinger as AssetStack;
				displayedCreatureUIC = uic;
			}
			
			public function displayCreatureInfo(creature:Creature):void
			{
				displayedCreatureInfo = new Canvas();
				displayedCreatureInfo.clipContent = false;
				var nameLabel:Label = getCreatureName(creature.name);
				displayedCreatureInfo.x = width/2 - 286;
				displayedCreatureInfo.y = inventoryCanvas.y - 38;
				displayedCreatureInfo.addChild(nameLabel);
				var vbox:VBox = new VBox();
				vbox.setStyle("verticalGap", 4);
				vbox.y = 40;
				var typeLabel:Text = getCreatureType(creature);
				vbox.addChild(typeLabel);
				var starCanvas:Canvas = getCreatureStars(creature);
				starCanvas.y = typeLabel.textHeight + typeLabel.y + 13;
				vbox.addChild(starCanvas);
				displayedCreatureInfo.addChild(vbox);
//				var buttonCanvas:Canvas = getCreatureButtons(creature);
//				displayedCreatureInfo.addChild(buttonCanvas);
//				var moodImage:Image = getCreatureMood(creature);
//				displayedCreatureInfo.addChild(moodImage);
				addChild(displayedCreatureInfo);				
			}
			
			public function getCreatureButtons(creature:Creature):Canvas
			{
				var grayFilter:GlowFilter = createGrayFilter();
				var canvas:Canvas = new Canvas();
				var img1:Image = new Image();
				img1.source = smallPizzaIconClass;
				img1.filters = [grayFilter];
				img1.y = 10;
				canvas.addChild(img1);
				var img2:Image = new Image();
				img2.source = smallCoffeeIconClass;
				img2.x = 35;
				img2.y = 5;
				img2.filters = [grayFilter];
				canvas.addChild(img2);
//				var img3:Image = new Image();
//				img3.source = musicNotesButton;
//				img3.x = 110;
//				img3.y = 35;
//				canvas.addChild(img3);
				canvas.y = 85;
				return canvas;
			}
			
			public function getCreatureStars(creature:Creature):Canvas
			{
				var canvas:Canvas = new Canvas();
				var star:Image;
				var i:int;
				for (i = 0; i<4; i++)
				{
					star = new Image();
//					if (creature.type == "BandMember")
//					{
//						star.source = starBlueFilled;
//					}
//					else
//					{
						if (i < 3)
						{
							star.source = fillerRedClass;											
						}
						else if (i < 7)
						{
							star.source = fillerYellowClass;
						}
						else
						{
							star.source = fillerGreenClass;
						}
//					}
					star.x = i * 14;
					canvas.addChild(star);
				}
				for (i = 4; i<10; i++)
				{
					star = new Image();
//					if (creature.type == "BandMember")
//					{
//						star.source = starBlueUnfilled;
//					}
//					else
//					{
						if (i < 3)
						{
							star.source = fillerRedEmptyClass;											
						}
						else if (i < 7)
						{
							star.source = fillerYellowEmptyClass;
						}
						else
						{
							star.source = fillerGreenEmptyClass;
						}
//					}
					star.x = i * 14;
					canvas.addChild(star);
				}
				return canvas;
				
			}
			
			public function getCreatureType(creature:Creature):Text
			{
				var canvas:Canvas = new Canvas();
				var text:Text = new Text();
				text.width = 140;
				var textFilter:GlowFilter = createTextFilter();
				if (creature.type == "Groupie")
				{
					text.text = "SuperFan";				
				}
				else if (creature.type == "BandMember")
				{
					text.text = "Band Member";
				}
				else
				{
					text.text = creature.type;
				}
				text.setStyle("color", 0xffffff);
//				text.setStyle("fontFamily", "Museo-Slab-900");
				text.setStyle("fontSize", 13);
				text.filters = [textFilter];
				text.y = 40;
				return text;
			}
			
			public function getCreatureMood(creature:Creature):Image
			{
				var image:Image = new Image();
				image.source = smileGreenClass;
				image.y = 70;
				return image;
			}
			
			public function getCreatureName(name:String):Label
			{
				var nameLabel:Label = new Label();
				nameLabel.text = name;
				nameLabel.filters = [createTextFilter()];
				nameLabel.setStyle("color", 0xffffff);
				nameLabel.setStyle("fontFamily", "Museo-Slab-900");
				nameLabel.setStyle("fontSize", 16);
				return nameLabel;
			}
			
			public function replaceCreature(creature:Creature):void
			{
				if (displayedCreatureUIC)
				{
					removeChild(displayedCreatureUIC);				
				}
				if (displayedCreatureInfo)
				{
					removeChild(displayedCreatureInfo);
				}
				var uic:ContainerUIC = getDisplayedCreature(creature, 0.55);
				displayedCreatureUIC = uic;
				setDisplayedCreatureDimensions(uic);
				displayCreatureInfo(creature);
				addChild(uic);
			}
			
			private function createBackCanvas():void
			{
				creatureCanvas = new Canvas();
				creatureCanvas.width = 252;
				creatureCanvas.height = 105;
				creatureCanvas.y = 510;
				creatureCanvas.x = 10;
				creatureCanvas.alpha = 0.4;
				creatureCanvas.setStyle("backgroundColor", 0xffffff);
				creatureCanvas.setStyle("cornerRadius", 12);
				creatureCanvas.setStyle("borderStyle", "solid");
				creatureCanvas.setStyle("borderColor", 0xffffff);
				creatureCanvas.clipContent = false;		
				this.addChild(creatureCanvas);
			}
			
			private function createInventoryCanvas():void
			{
				inventoryCanvas = new Canvas();
				inventoryCanvas.x = 0;
				inventoryCanvas.y = 520;
				inventoryCanvas.height = 110;
				inventoryCanvas.clipContent = false;
				addChild(inventoryCanvas);
			}
			
			private function createTabCanvas():void
			{
				tabCanvas = new HBox();
				tabCanvas.setStyle("horizontalGap", 12);
				tabCanvas.x = 500;
				tabCanvas.y = 424;
				tabCanvas.width = 160;
				tabCanvas.height = 54;
				tabCanvas.clipContent = false;
				addChild(tabCanvas);
			}
			
			private function addTabs():void
			{
				var btnFilter:GlowFilter = createButtonFilter();
				var editBtn:Button = new Button();
				editBtn.setStyle("skin", storeBtnClass);
				editBtn.addEventListener(MouseEvent.CLICK, onEditButtonClicked);
				editBtn.y = 458;
				editBtn.x = 502;
				editBtn.filters = [btnFilter];
				this.addChild(editBtn);
				var musicBtn:Button = new Button();
				musicBtn.setStyle("skin", musicBtnClass);
				musicBtn.addEventListener(MouseEvent.CLICK, onUserButtonClicked);
				musicBtn.y = 458;
				musicBtn.x = 555;
				musicBtn.filters = [btnFilter];				
				this.addChild(musicBtn);				
				var storeBtn:Button = new Button();
				storeBtn.setStyle("skin", microphoneBtnClass);
				storeBtn.addEventListener(MouseEvent.CLICK, onStoreButtonClicked);
				storeBtn.y = 458;
				storeBtn.x = 612;
				storeBtn.filters = [btnFilter];				
				this.addChild(storeBtn);				
				var pizzaBtn:Button = new Button();
				pizzaBtn.setStyle("skin", pizzaBtnClass);
				pizzaBtn.addEventListener(MouseEvent.CLICK, onCustomizerButtonClicked);
				pizzaBtn.y = 458;
				pizzaBtn.x = 665;
				pizzaBtn.filters = [btnFilter];				
				this.addChild(pizzaBtn);				
			}
			
			private function onEditButtonClicked(evt:MouseEvent):void
			{
				if (FlexGlobals.topLevelApplication.currentState != "editView")
				{
					switchToEditView();				
				}
				else
				{
					switchToWorldView();
				}
			}
			
			private function onMusicButtonClicked(evt:MouseEvent):void
			{
				
			}
			
			private function onStoreButtonClicked(evt:MouseEvent):void
			{
				showStore();
			}
			
			private function onCustomizerButtonClicked(evt:MouseEvent):void
			{
				showCustomizerOptions();
			}
			
			private function showCustomizerOptions():void
			{
				var customizerUI:UICanvas = worldView.bandManager.bandMemberManager.putBandMembersInCustomizer("walk_toward");
				worldView.bandManager.bandMemberManager.addEventListener(CustomizerEvent.CREATURE_SELECTED, onBandMemberSelected);
				worldView.uiLayer.addChild(customizerUI);
			}
			
			private function onBandMemberSelected(evt:CustomizerEvent):void
			{
				worldView.bandManager.bandMemberManager.removeEventListener(CustomizerEvent.CREATURE_SELECTED, onBandMemberSelected);
				worldView.uiLayer.removeChild(evt.selectedCreatureAsset.parent.parent);
				showCustomizer(evt.selectedCreatureAsset);
			}
			
			private function showCustomizer(asset:AssetStack):void
			{
				var customizer:CreatureCustomizer = new CreatureCustomizer(asset.creature as Creature, worldView.creatureManager);
				var canvas:UICanvas = new UICanvas();
				canvas.setStyles(0xffffff, 0x333333, 14, 500, 400);
				canvas.addChild(customizer);
				worldView.uiLayer.addChild(canvas);
			}
			
			private function switchToEditView():void
			{
				FlexGlobals.topLevelApplication.currentState = "editView";
			}				
			
			public function switchToWorldView():void
			{
				FlexGlobals.topLevelApplication.currentState = "worldView";
			}
			
			public function showStore():void
			{
				var store:Store = storeManager.getStoreByName("Structure Store");
				var uic:UIComponent = storeManager.getStoreUIComponent(store);
				uic.x = WorldView.WINDOW_WIDTH/2 - uic.width/2;
				uic.y = WorldView.WINDOW_HEIGHT/2 - uic.height/2 - 40;
				parentApplication.addChild(uic);
			}						
			
			private function onThingerPurchased(evt:StoreEvent):void
			{
//				var thingerRenderer:InventoryItemRenderer = new InventoryItemRenderer();
//				thingerRenderer.uic = thingerManager.getMovieClipCopy(evt.thinger, true, 62, 62, 70, 70);
//				var thingerIndex:int = inventoryIndex;
//				thingerRenderer.thingerIndex = thingerIndex;
//				inventoryCanvas.addChild(thingerRenderer);
//				inventoryIndex++;
			}
			
			public function friendDataLoaded(evt:DynamicEvent):void
			{
				facebookFriends = friendManager.facebookFriends;
				facebookUser = friendManager.facebookUser;
				onUserAndFriendsLoaded();
				
//				showFacebookFriends();				
//				showFacebookUser(facebookUser);
			}
			
			public function createTextFilter():GlowFilter
			{
				var filter:GlowFilter = new GlowFilter(0x333333, 1, 1.4, 1.4, 30, 5); 
				return filter;
			}				

			public function createButtonFilter():GlowFilter
			{
				var filter:GlowFilter = new GlowFilter(0xffffff, 0, 2, 2, 20, 5); 
				return filter;
			}				

			public function createGrayFilter():GlowFilter
			{
				var filter:GlowFilter = new GlowFilter(0x333333, 1, 1.04, 1.04, 20, 4); 
				return filter;
			}				
			
			private function showFacebookFriends():void
			{
				var orderedUsers:ArrayCollection = orderUsersByLevel();
				var displayedUsers:int = 0;
				if (orderedUsers.length > 6)
				{
					displayedUsers = 6;
				}
				else
				{
					displayedUsers = orderedUsers.length;
				}
				var index:int = 0;
				var friendRenderer:InventoryItemRenderer;
				var pic:Image;

				for (var j:int = index; j < 1; j++)
				{
					friendRenderer = new InventoryItemRenderer(0xCBE3F7, 0xCBE3F7, myUser.level);
					friendRenderer.renderRightToLeft = true;				
					friendRenderer.thingerIndex = j;	
					addFriendRendererStyle(null, friendRenderer, 0xffffff);
					pic = getDefaultPicture(friendRenderer);
					friendRenderer.uic = pic;
					friendRenderer.x += USER_PIC_DIMENSION;
					friendRenderer.addName("Invite");
					inventoryCanvas.addChild(friendRenderer);
					index++;
				}				
				for (j = index; j < displayedUsers; j++)
				{
					var obj:Object = orderedUsers[j-1];
					var friend:FacebookUser = obj.user;
					var friendGDI:GameDataInterface = friendManager.getFriendGDI(Number(friend.uid));
					friendRenderer = new InventoryItemRenderer(0xCBE3F7, 0xCBE3F7, levelManager.getLevelByXp(friendGDI.user.xp));
					friendRenderer.renderRightToLeft = true;
					addFriendRendererStyle(friendGDI, friendRenderer, 0xffffff);
//					var icon:Image = addIcon(friendRenderer);
					friendRenderer.thingerIndex = index;
					friendRenderer.thinger = friend;
					pic = getFriendPicture(friend, friendRenderer);
					friendRenderer.uic = pic;
					friendRenderer.x += USER_PIC_DIMENSION;
					friendRenderer.addLevelBox(index);
					friendRenderer.addName(friend.first_name);
					inventoryCanvas.addChild(friendRenderer);
					friendRenderer.addEventListener(MouseEvent.CLICK, onFriendRendererClicked);
					index++;					
				}	
				for (j = index; j < 6; j++)
				{
					friendRenderer = new InventoryItemRenderer(0xCBE3F7, 0xCBE3F7, myUser.level);
					friendRenderer.renderRightToLeft = true;				
					friendRenderer.thingerIndex = j;	
					addFriendRendererStyle(null, friendRenderer, 0xffffff);
					pic = getDefaultPicture(friendRenderer);
					friendRenderer.uic = pic;
					friendRenderer.x += USER_PIC_DIMENSION;
					friendRenderer.addName("Invite");
					inventoryCanvas.addChild(friendRenderer);
				}	
				inventoryCanvas.setStyle("right", 20);
				showScroller();
			}
			
			public function showScroller():void
			{
				var imageRight:Image = new Image();
				imageRight.source = arrowScrollerRight;
				imageRight.setStyle("right", -28);
				imageRight.y = 17;
				var imageLeft:Image = new Image();
				imageLeft.source = arrowScrollerLeft;
				imageLeft.x = -28;
				imageLeft.y = 17;
				inventoryCanvas.addChild(imageRight);
				inventoryCanvas.addChild(imageLeft);
			}
			
			public function getDefaultPicture(friendRenderer:InventoryItemRenderer):Image
			{
				var pic:Image = new Image();
				pic.x = (friendRenderer.getDimension() - FRIEND_PIC_DIMENSION)/2;
				pic.y = (friendRenderer.getDimension() - FRIEND_PIC_DIMENSION)/2;
				pic.source = guitarBtnClass;	
				return pic;			
			}
			
			public function getFriendPicture(friend:FacebookUser, friendRenderer:InventoryItemRenderer):Image
			{
				var pic:Image = new Image();
				pic.x = (friendRenderer.getDimension() - FRIEND_PIC_DIMENSION)/2;
				pic.y = (friendRenderer.getDimension() - FRIEND_PIC_DIMENSION)/2;
				pic.source = friend.pic_square;
				if (pic.source == null)
				{
					pic.source = guitarBtnClass;
				}
				return pic;				
			}
			
			public function orderUsersByLevel():ArrayCollection
			{
				var orderedUsers:ArrayCollection = new ArrayCollection();
				orderedUsers.addItem({user: facebookUser, rank: myUser.level.rank});
				for each (var facebooker:FacebookUser in facebookFriends)
				{
					var friendGDI:GameDataInterface = friendManager.getFriendGDI(Number(facebooker.uid));
					var level:Level = levelManager.getLevelByXp(friendGDI.user.xp);
					orderedUsers.addItem({user: facebooker, rank: level});
				}
				var sortField:SortField = new SortField("rank");
				sortField.numeric = true;
				var sort:Sort = new Sort();
				sort.fields = [sortField];
				orderedUsers.sort = sort;
				return orderedUsers;
			}
			
			public function addFriendRendererStyle(friendGDI:GameDataInterface, renderer:InventoryItemRenderer, backingColor:Object):void
			{	
				var canvas:Canvas = new Canvas();
				canvas.setStyle("backgroundColor", backingColor);
				canvas.setStyle("cornerRadius", 14);
				canvas.setStyle("borderStyle", "solid");
				canvas.setStyle("borderColor", backingColor);
				canvas.alpha = 0.4;
				canvas.height = 88;
				canvas.width = 72;
				renderer.height = 58;
				renderer.y = 13;
				canvas.x = -7;
				canvas.y = -6;
				renderer.addChild(canvas);
			}
			
			public function addIcon(renderer:InventoryItemRenderer):Image
			{
				var songCanvas:Canvas = new Canvas();
				songCanvas.setStyle("backgroundColor", 0x990B4D);
				songCanvas.setStyle("cornerRadius", 6);
				songCanvas.setStyle("borderStyle", "solid");
				songCanvas.setStyle("borderColor", 0x450020);
				songCanvas.height = 22;
//				songCanvas.x = 20;
				var songLabel:Label = new Label();
				songLabel.text = Math.floor(Math.random()*400).toString();
				songLabel.setStyle("color", 0xffffff);
				songLabel.setStyle("fontSize", 12);
				songLabel.setStyle("fontFamily", "Museo-Slab-900");
				songLabel.y = 95;
//				songLabel.setStyle("paddingLeft", 2);
//				songLabel.setStyle("paddingRight", 2);
				var textFilter:GlowFilter = createTextFilter();
				songLabel.filters = [textFilter];
//				songLabel.y = 2;
				songLabel.setStyle("right", -8);
				var image:Image = new Image();
				image.source = smallMusicNotesIconClass;
				image.y = 90;
				image.x = -5;
//				songCanvas.addChild(songLabel);
				renderer.addChild(songLabel);
				renderer.addChild(image);
				return image;
			}
			
			public function getDisplayedCreature(creature:Creature, dimension:Number):ContainerUIC
			{
				var asset:AssetStack = creature.getConstructedCreature(creature.layerableOrder, "walk_toward", dimension, dimension);
				asset.doAnimation("walk_toward", 39);
				asset.movieClipStack.scaleX = dimension;
				asset.movieClipStack.scaleY = dimension;				
				var uic:ContainerUIC = new ContainerUIC();
				uic.thinger = asset;
				uic.addChild(asset.movieClipStack);
				asset.movieClipStack.cacheAsBitmap = true;
				return uic;				
			}
			
			public function getBandMember(friendGDI:GameDataInterface, dimension:Number):ContainerUIC
			{
				if (friendGDI)
				{
					var constructedCreatures:ArrayCollection = friendGDI.creatureManager.getConstructedCreaturesByType("BandMember", dimension, dimension);
					if (constructedCreatures.length > 0)
					{
						var selectedCreature:AssetStack = constructedCreatures[0];
						selectedCreature.doAnimation("walk_toward", 39);
						selectedCreature.movieClipStack.scaleX = dimension;
						selectedCreature.movieClipStack.scaleY = dimension;
						var uic:ContainerUIC = new ContainerUIC();
						uic.thinger = selectedCreature;
						uic.addChild(selectedCreature.movieClipStack);
						selectedCreature.movieClipStack.cacheAsBitmap = true;
						return uic;
					}
				}	
				return null;			
			}
			
			public function showFacebookUser(facebookUser:FacebookUser):void
			{
				var userRenderer:InventoryItemRenderer = new InventoryItemRenderer(0xCBE3F7, 0xCBE3F7, levelManager.getLevelByXp(myUser.xp) as Level);
				addFriendRendererStyle(friendManager.mainGDI, userRenderer, 0xffffff);
				userRenderer.x = 10;				
				var pic:Image = new Image();
				pic.x = (userRenderer.getDimension() - FRIEND_PIC_DIMENSION)/2;
				pic.y = (userRenderer.getDimension() - FRIEND_PIC_DIMENSION)/2;
				pic.source = facebookUser.pic_square;
				userRenderer.uic = pic;
				userRenderer.addName("You");
				inventoryCanvas.addChild(userRenderer);
				
				userRenderer.thinger = facebookUser;
				userRenderer.addEventListener(MouseEvent.CLICK, onUserButtonClicked);
			}
			
			private function onFriendRendererClicked(evt:MouseEvent):void
			{
				var friend:FacebookUser = (evt.currentTarget as InventoryItemRenderer).thinger as FacebookUser;
				var snid:int = int(friend.uid);
				FlexGlobals.topLevelApplication.getFriendData(snid);
			}
			
			private function onUserButtonClicked(evt:MouseEvent):void
			{
				if (FlexGlobals.topLevelApplication.currentState == "friendView")
				{
					FlexGlobals.topLevelApplication.friendView.tearDown();
				}
				FlexGlobals.topLevelApplication.currentState = "worldView";
			}
			
			private function onBottomBarClicked(evt:MouseEvent):void
			{
				if (FlexGlobals.topLevelApplication.currentState == "editView")
				{
					if (editView.editMode)
					{
						editView.editMode.cancelEditActivities();									
					}
				}
			}
												
		]]>
	</mx:Script>
	<mx:Style source="../application.css"/>
</mx:Canvas>
