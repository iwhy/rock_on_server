<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="760" height="100" clipContent="false" creationComplete="onCreationComplete()">
	<mx:Script>
		<![CDATA[
			import controllers.LevelManager;
			import models.Level;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.collections.ArrayCollection;
			import game.GameDataInterface;
			import controllers.FriendManager;
			import world.AssetStack;
			import models.Creature;
			import world.ActiveAsset;
			import customizer.CustomizerEvent;
			import mx.events.CollectionEvent;
			import models.Store;
			import mx.containers.HBox;
			import mx.controls.Button;
			import mx.controls.Label;
			import mx.controls.Image;
			import mx.core.UIComponent;
			import mx.events.DynamicEvent;
			import facebook.FacebookFunTime;
			import com.facebook.data.users.FacebookUser;
			import mx.core.Application;
			import world.World;
			import models.User;
			import controllers.ThingerManager;
			import controllers.UserManager;
			import controllers.StoreManager;
			import stores.StoreEvent;		
			public var myWorld:World;
			[Bindable] public var myUser:User;
			
			public var inventoryCanvas:Canvas;
			public var inventoryIndex:int = 0;
			public var tabCanvas:HBox;
			public var worldView:WorldView;
			public var editView:EditView;			
			[Bindable] public var facebookFriends:Array;
			[Bindable] public var facebookUser:FacebookUser;
			
			[Bindable] public var storeManager:StoreManager;
			[Bindable] public var thingerManager:ThingerManager;
			[Bindable] public var userManager:UserManager;
			[Bindable] public var friendManager:FriendManager;
			[Bindable] public var levelManager:LevelManager;
			
			public static const USER_PIC_DIMENSION:int = 92;
			public static const FRIEND_PIC_DIMENSION:int = 50;
			
			[Embed(source="../libs/icons/musicnotes.png")]
			public var musicBtnClass:Class;
			[Embed(source="../libs/icons/arrow.png")]
			public var arrowBtnClass:Class;
			[Embed(source="../libs/icons/store.png")]
			public var storeBtnClass:Class;
			[Embed(source="../libs/icons/guitar.png")]
			public var guitarBtnClass:Class;
			[Embed(source="../libs/icons/heart.png")]
			public var heartBtnClass:Class;
			[Embed(source="../libs/icons/pizza.png")]
			public var pizzaBtnClass:Class;
			

			private function onCreationComplete():void
			{		
				createBackCanvas();					
				createTabCanvas();
				createInventoryCanvas();
				addTabs();			
					
//				addEventListener("facebookDataLoaded", onFriendDataLoaded);
				addEventListener(MouseEvent.CLICK, onBottomBarClicked);
			}		
		
			public function onUserLoaded():void
			{
				myUser.addEventListener(StoreEvent.THINGER_PURCHASED, onThingerPurchased);	
				onUserAndFriendsLoaded();
			}
			
			public function onUserAndFriendsLoaded():void
			{
				if (parentApplication.userLoaded && parentApplication.friendsLoaded)
				{
					showFacebookFriends();				
					showFacebookUser(facebookUser);												
				}
			}
			
			private function createBackCanvas():void
			{
				var backCanvas:Canvas = new Canvas();
				backCanvas.x = -2;
				backCanvas.y = 515;
				backCanvas.width = 762;
				backCanvas.height = 115;
				backCanvas.clipContent = false;
//				backCanvas.setStyle("backgroundColor", 0xffffff);
//				backCanvas.setStyle("cornerRadius", 8);
//				backCanvas.setStyle("borderStyle", "solid");
//				backCanvas.setStyle("borderColor", 0xDBDBDB);
//				backCanvas.setStyle("borderThickness", 5);
//				backCanvas.setStyle("borderSides", "top");
				var thirdCanvas:Canvas = new Canvas();
				thirdCanvas.width = 762;
				thirdCanvas.height = 92;
				thirdCanvas.y = 23;
				thirdCanvas.setStyle("backgroundColor", 0x9CD1FF);
				thirdCanvas.setStyle("cornerRadius", 8);
				thirdCanvas.setStyle("borderStyle", "solid");
				thirdCanvas.setStyle("borderColor", 0x9CD1FF);
				thirdCanvas.clipContent = false;				
				var secondCanvas:Canvas = new Canvas();
				secondCanvas.width = 762;
				secondCanvas.height = 80;
				secondCanvas.y = 35;
				secondCanvas.clipContent = false;
				secondCanvas.setStyle("backgroundColor", 0x99CFFF);
				secondCanvas.setStyle("cornerRadius", 8);
				secondCanvas.setStyle("borderStyle", "solid");
				secondCanvas.setStyle("borderColor", 0x99CFFF);
//				backCanvas.addChild(thirdCanvas);
//				backCanvas.addChild(secondCanvas);
				this.addChild(backCanvas);
			}
			
			private function createInventoryCanvas():void
			{
				inventoryCanvas = new Canvas();
				inventoryCanvas.x = 0;
				inventoryCanvas.y = 520;
				inventoryCanvas.width = 760;
				inventoryCanvas.height = 110;
				inventoryCanvas.clipContent = false;
//				inventoryCanvas.setStyle("backgroundColor", 0x333333);
//				inventoryCanvas.setStyle("cornerRadius", 6);
//				inventoryCanvas.setStyle("borderStyle", "solid");
//				inventoryCanvas.setStyle("borderColor", 0x000000);
				addChild(inventoryCanvas);
			}
			
			private function createTabCanvas():void
			{
				tabCanvas = new HBox();
				tabCanvas.setStyle("horizontalGap", 12);
				tabCanvas.x = 500;
				tabCanvas.y = 424;
				tabCanvas.width = 160;
				tabCanvas.height = 54;
				tabCanvas.clipContent = false;
//				tabCanvas.setStyle("backgroundColor", 0x000000);
//				tabCanvas.setStyle("cornerRadius", 14);
//				tabCanvas.setStyle("borderStyle", "solid");
//				tabCanvas.setStyle("borderColor", 0x000000);
				addChild(tabCanvas);
			}
			
			private function addTabs():void
			{
				var btnFilter:GlowFilter = createButtonFilter();
				var editBtn:Button = new Button();
				editBtn.setStyle("skin", arrowBtnClass);
				editBtn.addEventListener(MouseEvent.CLICK, onEditButtonClicked);
				editBtn.y = 458;
				editBtn.x = 502;
				editBtn.filters = [btnFilter];
				this.addChild(editBtn);
				var musicBtn:Button = new Button();
				musicBtn.setStyle("skin", musicBtnClass);
				musicBtn.addEventListener(MouseEvent.CLICK, onMusicButtonClicked);
				musicBtn.y = 458;
				musicBtn.x = 555;
				musicBtn.filters = [btnFilter];				
				this.addChild(musicBtn);				
				var storeBtn:Button = new Button();
				storeBtn.setStyle("skin", storeBtnClass);
				storeBtn.addEventListener(MouseEvent.CLICK, onStoreButtonClicked);
				storeBtn.y = 458;
				storeBtn.x = 612;
				storeBtn.filters = [btnFilter];				
				this.addChild(storeBtn);				
				var pizzaBtn:Button = new Button();
				pizzaBtn.setStyle("skin", pizzaBtnClass);
				pizzaBtn.addEventListener(MouseEvent.CLICK, onCustomizerButtonClicked);
				pizzaBtn.y = 458;
				pizzaBtn.x = 665;
				pizzaBtn.filters = [btnFilter];				
				this.addChild(pizzaBtn);				
			}
			
			private function onEditButtonClicked(evt:MouseEvent):void
			{
				if (Application.application.currentState != "editView")
				{
					switchToEditView();				
				}
				else
				{
					switchToWorldView();
				}
			}
			
			private function onMusicButtonClicked(evt:MouseEvent):void
			{
				
			}
			
			private function onStoreButtonClicked(evt:MouseEvent):void
			{
				showStore();
			}
			
			private function onCustomizerButtonClicked(evt:MouseEvent):void
			{
				showCustomizerOptions();
			}
			
			private function showCustomizerOptions():void
			{
				var customizerUI:UICanvas = worldView.bandManager.bandMemberManager.putBandMembersInCustomizer("walk_toward");
				worldView.bandManager.bandMemberManager.addEventListener(CustomizerEvent.CREATURE_SELECTED, onBandMemberSelected);
				worldView.uiLayer.addChild(customizerUI);
			}
			
			private function onBandMemberSelected(evt:CustomizerEvent):void
			{
				worldView.bandManager.bandMemberManager.removeEventListener(CustomizerEvent.CREATURE_SELECTED, onBandMemberSelected);
				worldView.uiLayer.removeChild(evt.selectedCreatureAsset.parent.parent);
				showCustomizer(evt.selectedCreatureAsset);
			}
			
			private function showCustomizer(asset:AssetStack):void
			{
				var customizer:CreatureCustomizer = new CreatureCustomizer(asset.creature as Creature, worldView.creatureManager);
				var canvas:UICanvas = new UICanvas();
				canvas.setStyles(0xffffff, 0x333333, 14, 500, 400);
				canvas.addChild(customizer);
				worldView.uiLayer.addChild(canvas);
			}
			
			private function switchToEditView():void
			{
				Application.application.currentState = "editView";
			}				
			
			public function switchToWorldView():void
			{
				Application.application.currentState = "worldView";
			}
			
			public function showStore():void
			{
				var store:Store = storeManager.getStoreByName("Structure Store");
				var uic:UIComponent = storeManager.getStoreUIComponent(store);
				uic.x = WorldView.WINDOW_WIDTH/2 - uic.width/2;
				uic.y = WorldView.WINDOW_HEIGHT/2 - uic.height/2 - 40;
				parentApplication.addChild(uic);
			}						
			
			private function onThingerPurchased(evt:StoreEvent):void
			{
//				var thingerRenderer:InventoryItemRenderer = new InventoryItemRenderer();
//				thingerRenderer.uic = thingerManager.getMovieClipCopy(evt.thinger, true, 62, 62, 70, 70);
//				var thingerIndex:int = inventoryIndex;
//				thingerRenderer.thingerIndex = thingerIndex;
//				inventoryCanvas.addChild(thingerRenderer);
//				inventoryIndex++;
			}
			
			public function friendDataLoaded(evt:DynamicEvent):void
			{
				facebookFriends = friendManager.facebookFriends;
				facebookUser = friendManager.facebookUser;
				onUserAndFriendsLoaded();
				
//				showFacebookFriends();				
//				showFacebookUser(facebookUser);
			}
			
			public function createTextFilter():GlowFilter
			{
				var filter:GlowFilter = new GlowFilter(0x222222, 1, 1.1, 1.1, 30, 5); 
				return filter;
			}				

			public function createButtonFilter():GlowFilter
			{
				var filter:GlowFilter = new GlowFilter(0xffffff, 0, 2, 2, 20, 5); 
				return filter;
			}				
			
			private function showFacebookFriends():void
			{
				var orderedUsers:ArrayCollection = orderUsersByLevel();
				
				var index:int = 0;
				var friendRenderer:InventoryItemRenderer;
				var pic:Image;
				for each (var obj:Object in orderedUsers)
				{
					var friend:FacebookUser = obj.user;
					var friendUser:User = friendManager.getFriendBasicInfo(Number(friend.uid));
					friendRenderer = new InventoryItemRenderer(0xCBE3F7, 0xCBE3F7, levelManager.getLevelByXp(friendUser.xp));

					addFriendRendererStyle(friendRenderer);
					friendRenderer.thingerIndex = index;
					friendRenderer.thinger = friend;
					pic = getFriendPicture(friend, friendRenderer);
					friendRenderer.uic = pic;
					friendRenderer.x += USER_PIC_DIMENSION;
					friendRenderer.addLevelBox(index);
					friendRenderer.addName(friend.first_name);
					inventoryCanvas.addChild(friendRenderer);
					friendRenderer.addEventListener(MouseEvent.CLICK, onFriendRendererClicked);
					index++;					
				}	
				for (var j:int = index; j < 10; j++)
				{
					friendRenderer = new InventoryItemRenderer(0xCBE3F7, 0xCBE3F7, myUser.level);
					friendRenderer.thingerIndex = j;					
					addFriendRendererStyle(friendRenderer);
					pic = getDefaultPicture(friendRenderer);
					friendRenderer.uic = pic;
					friendRenderer.x += USER_PIC_DIMENSION;
					friendRenderer.addName("Invite");
					inventoryCanvas.addChild(friendRenderer);
				}			
			}
			
			public function getDefaultPicture(friendRenderer:InventoryItemRenderer):Image
			{
				var pic:Image = new Image();
				pic.x = (friendRenderer.getDimension() - FRIEND_PIC_DIMENSION)/2;
				pic.y = (friendRenderer.getDimension() - FRIEND_PIC_DIMENSION)/2;
				pic.source = guitarBtnClass;	
				return pic;			
			}
			
			public function getFriendPicture(friend:FacebookUser, friendRenderer:InventoryItemRenderer):Image
			{
				var pic:Image = new Image();
				pic.x = (friendRenderer.getDimension() - FRIEND_PIC_DIMENSION)/2;
				pic.y = (friendRenderer.getDimension() - FRIEND_PIC_DIMENSION)/2;
				pic.source = friend.pic_square;
				if (pic.source == null)
				{
					pic.source = guitarBtnClass;
				}
				return pic;				
			}
			
			public function orderUsersByLevel():ArrayCollection
			{
				var orderedUsers:ArrayCollection = new ArrayCollection();
				orderedUsers.addItem({user: facebookUser, rank: myUser.level.rank});
				for each (var facebooker:FacebookUser in facebookFriends)
				{
					var friendUser:User = friendManager.getFriendBasicInfo(Number(facebooker.uid));
					var level:Level = levelManager.getLevelByXp(friendUser.xp);
					orderedUsers.addItem({user: facebooker, rank: level});
				}
				var sortField:SortField = new SortField("rank");
				sortField.numeric = true;
				var sort:Sort = new Sort();
				sort.fields = [sortField];
				orderedUsers.sort = sort;
				return orderedUsers;
			}
			
			public function addFriendRendererStyle(renderer:InventoryItemRenderer):void
			{	
				renderer.height = 58;
				renderer.y = 13;
			}
			
			public function showFacebookUser(facebookUser:FacebookUser):void
			{
				var friendUser:User = friendManager.getFriendBasicInfo(int(facebookUser.uid));
				var userRenderer:InventoryItemRenderer = new InventoryItemRenderer(0xCBE3F7, 0xCBE3F7, levelManager.getLevelByXp(friendUser.xp) as Level);
				addFriendRendererStyle(userRenderer);
				userRenderer.x = 10;				
				var pic:Image = new Image();
				pic.x = (userRenderer.getDimension() - FRIEND_PIC_DIMENSION)/2;
				pic.y = (userRenderer.getDimension() - FRIEND_PIC_DIMENSION)/2;
				pic.source = facebookUser.pic_square;
				userRenderer.uic = pic;
				userRenderer.addName("You");
				inventoryCanvas.addChild(userRenderer);
				
				userRenderer.thinger = facebookUser;
				userRenderer.addEventListener(MouseEvent.CLICK, onUserRendererClicked);
			}
			
			private function onFriendRendererClicked(evt:MouseEvent):void
			{
				var friend:FacebookUser = (evt.currentTarget as InventoryItemRenderer).thinger as FacebookUser;
				var snid:int = int(friend.uid);
				Application.application.getFriendData(snid);
			}
			
			private function onUserRendererClicked(evt:MouseEvent):void
			{
				Application.application.currentState = "worldView";
			}
			
			private function onBottomBarClicked(evt:MouseEvent):void
			{
				if (Application.application.currentState == "editView")
				{
					if (editView.editMode)
					{
						editView.editMode.cancelEditActivities();									
					}
				}
			}
												
		]]>
	</mx:Script>
	<mx:Style source="../application.css"/>
</mx:Canvas>
