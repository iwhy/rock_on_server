<?xml version="1.0" encoding="utf-8"?>
<views:WorldView xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:views="views.*" width="1000" height="1000" creationComplete="onCreationComplete()" clipContent="false" horizontalScrollPolicy="off" verticalScrollPolicy="off">
	<mx:Script>
		<![CDATA[
			import controllers.CreatureController;
			import controllers.DwellingController;
			import controllers.LayerableController;
			import controllers.StoreController;
			import controllers.StructureController;
			import controllers.ThingerController;
			import controllers.UserController;
			
			import flash.utils.getQualifiedClassName;
			import flash.utils.getTimer;
			
			import models.Creature;
			import models.EssentialModelReference;
			import models.OwnedLayerable;
			import models.OwnedStructure;
			import models.OwnedThinger;
			import models.Store;
			import models.StoreOwnedThinger;
			import models.Structure;
			import models.Thinger;
			import models.User;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Button;
			import mx.controls.Text;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			
			import rock_on.Booth;
			import rock_on.BoothBoss;
			import rock_on.ConcertStage;
			import rock_on.ListeningStation;
			import rock_on.ListeningStationBoss;
			import rock_on.StageManager;
			import rock_on.Venue;
			
			import stores.StoreEvent;
			
			import user.UserEvent;
			
			import world.ActiveAsset;
			import world.AssetStack;
			import world.BitmapBlotter;
			import world.Point3D;
			import world.World;				
			public var pausedForStateCompletion:OwnedStructure;
			public var stageWidth:int = 1200;
			public var stageHeight:int = 1200;
			
			private function onCreationComplete():void
			{
				viewReference = this;
				addEventListener(Event.ENTER_FRAME, onEnterFrame);
				addEventListener(MouseEvent.MOUSE_DOWN, function onMouseDown(evt:MouseEvent):void
				{
					wbi.handleMouseDown(stageView, viewReference, new Point(evt.localX, evt.localY));
				});	
				
				editMode = new EditMode(myWorld, this);
				editMode.addEventListener("structurePlaced", onStructurePlaced);
				editMode.structureController = structureController;
				addChild(editMode);	
				
				addTileStuff();
				
				addUILayer();				
				
				dispatchEditViewCreationEvent();			
			}
			
			public function addTileStuff():void
			{
				var btn:Button = new Button();
				btn.addEventListener(MouseEvent.CLICK, switchToTileMode);
				btn.y = 200;
				btn.width = 40;
				btn.height = 40;
				addChild(btn);
			}
			
			private function switchToTileMode(evt:MouseEvent):void
			{
				this.removeChild(editMode);
				this.removeChild(myWorld);
				var tileMode:TileMode = new TileMode(this, myWorld.worldWidth, myWorld.worldDepth, myWorld.blockSize);
				addChild(tileMode);
			}
			
			override public function onEnterFrame(evt:Event):void
			{
				var time:Number = getTimer();
				var deltaTime:Number = time - lastTime;
				var lockedDelta:Number = Math.min(100, deltaTime);
				fps = 1000/deltaTime;
				myMemory = System.totalMemory;
				lastTime = time;
				
				if (wbi && FlexGlobals.topLevelApplication.currentState == "editView")
				{
					wbi.handleEnterFrameEvents(viewReference);			
				}
				if (venueManager)
				{
					venueManager.update(lockedDelta);				
				}
			}			
			
			private function dragStage():void
			{		
				stageView.x = stageView.x + (mouseX - mouseIncrementX);
				stageView.y = stageView.y + (mouseY - mouseIncrementY);
				this.x = this.x + (mouseX - mouseIncrementX);
				this.y = this.y + (mouseY - mouseIncrementY);
			}
			
			private function onMouseUp(evt:MouseEvent):void
			{
				isDragging = false;
			}			
			
			private function addUILayer():void
			{
				uiLayer = new UILayer();
				uiLayer.width = width;
				uiLayer.height = height;
				addChild(uiLayer);				
			}			
			
			public function dispatchEditViewCreationEvent():void
			{
				var evt:DynamicEvent = new DynamicEvent("editViewCreated", true, true);
				dispatchEvent(evt);
			}	
			
			public function initializeStage():void
			{	
				stageManager = venueManager.venue.stageManager;
				myStage = new World(stageWidth, stageHeight, tileSize, stageManager.concertStage.structure.height);
				stageManager.myStage = myStage;
				addChild(myStage);
			}			
			
			public function initializeStageStructures():void
			{
				stageManager.editMirror = true;
				stageManager.addStageToWorld(stageManager.stageAsset, stageManager.concertStage.worldCoords, myWorld);
				stageManager.addStageDecorations(myWorld);
			}			
			
			private function onStructurePlaced(evt:DynamicEvent):void
			{
				thingerController.saveStructurePlacement(evt.asset, evt.currentPoint);
			}
			
			override public function updateRenderedStructures(os:OwnedStructure, method:String):void
			{
				var asset:ActiveAsset = structureController.findAssetFromOwnedStructure(myWorld.assetRenderer.unsortedAssets, os);
				if (method == "sell")
				{
					myWorld.assetRenderer.removeAsset(asset);
				}
				if (method == "save_placement")
				{
					myWorld.updateAssetCoords(asset, new Point3D(os.x, os.y, os.z), false);
				}
			}							
		]]>
	</mx:Script>		
</views:WorldView>

