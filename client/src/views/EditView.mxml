<?xml version="1.0" encoding="utf-8"?>
<views:WorldView xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:views="views.*" width="1000" height="1000" creationComplete="onCreationComplete()" clipContent="false" horizontalScrollPolicy="off" verticalScrollPolicy="off">
	<mx:Script>
		<![CDATA[
			import clickhandlers.EditViewClickHandler;
			
			import controllers.CreatureController;
			import controllers.DwellingController;
			import controllers.LayerableController;
			import controllers.StoreController;
			import controllers.StructureController;
			import controllers.ThingerController;
			import controllers.UserController;
			
			import flash.utils.getQualifiedClassName;
			import flash.utils.getTimer;
			
			import game.ImposterOwnedStructure;
			
			import models.Creature;
			import models.EssentialModelReference;
			import models.OwnedLayerable;
			import models.OwnedStructure;
			import models.OwnedThinger;
			import models.Store;
			import models.StoreOwnedThinger;
			import models.Structure;
			import models.Thinger;
			import models.User;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Button;
			import mx.controls.Text;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			
			import rock_on.Booth;
			import rock_on.BoothBoss;
			import rock_on.ConcertStage;
			import rock_on.ListeningStation;
			import rock_on.ListeningStationBoss;
			import rock_on.StageManager;
			import rock_on.Venue;
			
			import stores.StoreEvent;
			
			import user.UserEvent;
			
			import world.ActiveAsset;
			import world.AssetStack;
			import world.BitmapBlotter;
			import world.Point3D;
			import world.World;				
			
			public var tileMode:TileMode;
			public var normalStructureMode:NormalStructureMode;
			public var currentMode:UIComponent;
			
			public var ios:ImposterOwnedStructure;
			public var stageWidth:int = 1200;
			public var stageHeight:int = 1200;
			public var worldOriginX:Number;
			public var worldOriginY:Number;
			
			private function onCreationComplete():void
			{
				viewReference = this;
				mouseHandler = new EditViewClickHandler(venueManager.venue, this);
				
				addButtons();
				dispatchEditViewCreationEvent();						
			}
			
			public function addButtons():void
			{
				var tilebtn:Button = new Button();
				tilebtn.addEventListener(MouseEvent.CLICK, onTileModeButtonClicked);
				tilebtn.y = 200;
				tilebtn.width = 40;
				tilebtn.height = 40;
				FlexGlobals.topLevelApplication.topBarView.addChild(tilebtn);
				
				var normalBtn:Button = new Button();
				normalBtn.addEventListener(MouseEvent.CLICK, onNormalStructureModeButtonClicked);
				normalBtn.y = 250;
				normalBtn.width = 40;
				normalBtn.height = 40;
				FlexGlobals.topLevelApplication.topBarView.addChild(normalBtn);

				var moveBtn:Button = new Button();
				moveBtn.addEventListener(MouseEvent.CLICK, onMoveModeButtonClicked);
				moveBtn.y = 300;
				moveBtn.width = 40;
				moveBtn.height = 40;
				FlexGlobals.topLevelApplication.topBarView.addChild(moveBtn);

				var rotateBtn:Button = new Button();
				rotateBtn.addEventListener(MouseEvent.CLICK, onRotateStructureModeButtonClicked);
				rotateBtn.y = 350;
				rotateBtn.width = 40;
				rotateBtn.height = 40;
				FlexGlobals.topLevelApplication.topBarView.addChild(rotateBtn);
				
				var inventoryBtn:Button = new Button();
				inventoryBtn.addEventListener(MouseEvent.CLICK, onInventoryModeButtonClicked);
				inventoryBtn.y = 400;
				inventoryBtn.width = 40;
				inventoryBtn.height = 40;
				FlexGlobals.topLevelApplication.topBarView.addChild(inventoryBtn);
			}
			
			private function onTileModeButtonClicked(evt:MouseEvent):void
			{
				switchToTileMode();
			}
			
			private function onNormalStructureModeButtonClicked(evt:MouseEvent):void
			{
				switchToNormalStructureMode();
			}

			private function onMoveModeButtonClicked(evt:MouseEvent):void
			{
				switchToNormalMoveMode();
			}
			
			private function onRotateStructureModeButtonClicked(evt:MouseEvent):void
			{
				switchToRotateStructureMode();
			}
			
			private function onInventoryModeButtonClicked(evt:MouseEvent):void
			{
				switchToInventoryMode();
			}
			
			public function clearCurrentChildren():void
			{				
				if (normalStructureMode && this.contains(normalStructureMode))
				{
					normalStructureMode.removeChild(normalStructureMode.tileLayer);
					normalStructureMode.removeChild(normalStructureMode.structureWorld);
					this.removeChild(normalStructureMode);				
				}
				if (tileMode && this.contains(tileMode))
				{
					tileMode.removeChild(tileMode.tileWorld);
					this.removeChild(tileMode);					
				}
			}
			
			private function switchToTileMode():void
			{
				clearCurrentChildren();
				tileMode = new TileMode(this, 
					(venueManager.venue.dwelling.dimension + venueManager.venue.dwelling.sidewalk_dimension) * FlexGlobals.topLevelApplication.tileSize, 
					venueManager.venue.dwelling.dimension * FlexGlobals.topLevelApplication.tileSize, 
					FlexGlobals.topLevelApplication.tileSize);
				tileMode.addEventListener("structurePlaced", onStructurePlaced);
				tileMode.nestLevel = 1;
				currentMode = tileMode;
				addChild(tileMode);
			}
			
			private function switchToNormalStructureMode():void
			{
				clearCurrentChildren();
				normalStructureMode = new NormalStructureMode(this, 
					(venueManager.venue.dwelling.dimension + venueManager.venue.dwelling.sidewalk_dimension) * FlexGlobals.topLevelApplication.tileSize, 
					venueManager.venue.dwelling.dimension * FlexGlobals.topLevelApplication.tileSize, 
					FlexGlobals.topLevelApplication.tileSize);
				normalStructureMode.addEventListener("structurePlaced", onStructurePlaced);
				normalStructureMode.addEventListener("structurePlacedAndRotated", onStructurePlacedAndRotated);
				normalStructureMode.nestLevel = 1;
				currentMode = normalStructureMode;
				addChild(normalStructureMode);
			}
			
			private function switchToNormalMoveMode():void
			{
				normalStructureMode.inventoryToolEnabled = false;
				normalStructureMode.rotationToolEnabled = false;
			}
			
			private function switchToRotateStructureMode():void
			{
				normalStructureMode.inventoryToolEnabled = false;
				normalStructureMode.rotationToolEnabled = true;
			}
			
			private function switchToInventoryMode():void
			{
				normalStructureMode.rotationToolEnabled = false;
				normalStructureMode.inventoryToolEnabled = true;
			}
			
			public function addTemporaryCoords(os:OwnedStructure):void
			{
				os.x = 0;
				os.y = 0;
				os.z = 0;
			}
			
			public function newStructureAdded(os:OwnedStructure):void
			{
				var asset:ActiveAsset;
				if (os.structure.structure_type == "Tile")
				{
					if (!this.tileMode)
						switchToTileMode();
					addTemporaryCoords(os);
					asset = tileMode.addTileAsset(os);
					tileMode.selectTile(asset);
				}
				else if (os.structure.structure_type == "Booth" || os.structure.structure_type == "ListeningStation" || os.structure.structure_type == "Decoration")
				{
					if (!this.normalStructureMode)
						switchToNormalStructureMode();
					normalStructureMode.rotationToolEnabled = false;
					normalStructureMode.inventoryToolEnabled = false;
					addTemporaryCoords(os);
					asset = normalStructureMode.addStructureAssetFromInventory(os, normalStructureMode.structureWorld);
					normalStructureMode.selectStructure(asset);
				}
				else if (os.structure.structure_type == "StructureTopper")
				{
					if (!this.normalStructureMode)
						switchToNormalStructureMode();
					normalStructureMode.rotationToolEnabled = false;
					normalStructureMode.inventoryToolEnabled = false;
					addTemporaryCoords(os);
					asset = normalStructureMode.addStructureAssetFromInventory(os, normalStructureMode.structureWorld);
					normalStructureMode.selectStructure(asset);
				}
			}				
			
			private function addUILayer():void
			{
				uiLayer = new UILayer();
				uiLayer.width = width;
				uiLayer.height = height;
				addChild(uiLayer);				
			}			
			
			public function dispatchEditViewCreationEvent():void
			{
				var evt:DynamicEvent = new DynamicEvent("editViewCreated", true, true);
				dispatchEvent(evt);
			}	
			
			public function initializeStage():void
			{	
				stageManager = venueManager.venue.stageManager;
				myStage = new World(venueManager.venue.dwelling.dimension * FlexGlobals.topLevelApplication.tileSize, 
					venueManager.venue.dwelling.dimension * FlexGlobals.topLevelApplication.tileSize, 
					FlexGlobals.topLevelApplication.tileSize, 
					stageManager.concertStage.structure.height);
				stageManager.myStage = myStage;
				addChild(myStage);
			}			
			
			public function initializeStageStructures():void
			{
				stageManager.editMirror = true;
				stageManager.addStageToWorld(stageManager.stageAsset, stageManager.concertStage.worldCoords, myWorld);
				stageManager.addStageDecorations(myWorld);
			}			
			
			private function onStructurePlaced(evt:DynamicEvent):void
			{
				thingerController.saveStructurePlacement(evt.asset, evt.currentPoint);
			}
			
			private function onStructurePlacedAndRotated(evt:DynamicEvent):void
			{
				thingerController.saveStructurePlacementAndRotation(evt.asset, evt.currentPoint, evt.rotation);
			}
			
			override public function updateRenderedStructures(os:OwnedStructure, method:String):void
			{
				var asset:ActiveAsset = structureController.findAssetFromOwnedStructure(myWorld.assetRenderer.unsortedAssets, os);
				if (method == "sell" && asset)
				{
					myWorld.assetRenderer.removeAsset(asset);
				}
				if (method == "save_placement" && asset)
				{
					myWorld.updateAssetCoords(asset, new Point3D(os.x, os.y, os.z), false);
				}
			}							
		]]>
	</mx:Script>		
</views:WorldView>

