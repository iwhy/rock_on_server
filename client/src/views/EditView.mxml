<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="760" height="610" creationComplete="onCreationComplete()">
	<mx:Script>
		<![CDATA[
			import controllers.CreatureManager;
			import controllers.DwellingManager;
			import controllers.LayerableManager;
			import controllers.StoreManager;
			import controllers.StructureManager;
			import controllers.ThingerManager;
			import controllers.UserManager;
			
			import flash.utils.getQualifiedClassName;
			import flash.utils.getTimer;
			
			import models.Creature;
			import models.EssentialModelReference;
			import models.OwnedLayerable;
			import models.OwnedStructure;
			import models.OwnedThinger;
			import models.Store;
			import models.StoreOwnedThinger;
			import models.Structure;
			import models.Thinger;
			import models.User;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Text;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			
			import rock_on.Booth;
			import rock_on.BoothManager;
			import rock_on.ConcertStage;
			import rock_on.ListeningStation;
			import rock_on.ListeningStationManager;
			import rock_on.StageManager;
			import rock_on.Venue;
			
			import stores.StoreEvent;
			
			import user.UserEvent;
			
			import world.ActiveAsset;
			import world.AssetStack;
			import world.BitmapBlotter;
			import world.Point3D;
			import world.World;	

			public var myWorld:World;
			[Bindable] public var myUser:User;
			
			public var uiLayer:UILayer;
			public var bitmapBlotter:BitmapBlotter;
			public var inventoryCanvas:Canvas;
			public var inventoryIndex:int = 0;
			public var editMode:EditMode;
			public var pausedForStateCompletion:OwnedStructure;
			public var editModeActivated:Boolean = false;
			public var booths:ArrayCollection;
			public var stages:ArrayCollection;
			public var concertStage:ConcertStage;
			[Bindable] public var boothManager:BoothManager;
			[Bindable] public var stageManager:StageManager;
			[Bindable] public var listeningStationManager:ListeningStationManager;
			
			public var creditsBox:Text;
			
			[Bindable] public var layerableManager:LayerableManager;
			[Bindable] public var structureManager:StructureManager;
			[Bindable] public var storeManager:StoreManager;
			[Bindable] public var creatureManager:CreatureManager;
			[Bindable] public var thingerManager:ThingerManager;
			[Bindable] public var userManager:UserManager;
			[Bindable] public var venueManager:VenueManager;
			[Bindable] public var dwellingManager:DwellingManager;
			
			[Bindable] public var myMemory:Number;
			[Bindable] public var fps:Number;
			[Bindable] public var aux:Number;	
			public var lastTime:Number;	
					
			private function onCreationComplete():void
			{
				addEventListener(Event.ENTER_FRAME, onEnterFrame);
				myWorld = new World(800, 800, 40);				
				addChild(myWorld);	
												
				editMode = new EditMode(myWorld, this);
				editMode.addEventListener('structurePlaced', onStructurePlaced);
				editMode.structureManager = structureManager;
				addChild(editMode);		
				initializeSpace();
				
				addUILayer();				
				
				dispatchEditViewCreationEvent();			
			}
			
			private function addUILayer():void
			{
				uiLayer = new UILayer();
				uiLayer.width = width;
				uiLayer.height = height;
				addChild(uiLayer);				
			}			
			
			public function dispatchEditViewCreationEvent():void
			{
				var evt:DynamicEvent = new DynamicEvent("editViewCreated", true, true);
				dispatchEvent(evt);
			}
			
			public function initializeSpace():void
			{
				addStage();
				boothManager = new BoothManager(structureManager, myWorld);
				listeningStationManager = new ListeningStationManager(structureManager, layerableManager, myWorld);
				venueManager = FlexGlobals.topLevelApplication.worldView.venueManager;
				boothManager.venue = venueManager.venue;
				listeningStationManager.venue = venueManager.venue;
				boothManager.editMirror = true;
				boothManager.setInMotion();
				listeningStationManager.editMirror = true;
				listeningStationManager.showListeningStations();
			}
			
			private function onEnterFrame(evt:Event):void
			{
				var time:Number = getTimer();
				var deltaTime:Number = time - lastTime;
				var lockedDelta:Number = Math.min(100, deltaTime);
				fps = 1000/deltaTime;
				myMemory = System.totalMemory;
				lastTime = time;
			}
			
			public function onUserLoaded():void
			{
			}
			
			public function addStage():void
			{
				stageManager = new StageManager(structureManager, myWorld);
				stageManager.editMirror = true;
				stageManager.setInMotion();
				concertStage = stageManager.concertStage;
			}			
			
			private function onStructurePlaced(evt:DynamicEvent):void
			{
				thingerManager.saveStructurePlacement(evt.asset, evt.currentPoint);
			}
		
			private function onWorldThingerPurchased(evt:UserEvent):void
			{
				creditsBox.text = myUser.credits.toString();
			}
			
			private function addStaticAsset(asset:ActiveAsset, addTo:Point3D):void
			{
//				var addTo:Point3D = new Point3D(Math.floor(Math.random()*myWorld.tilesWide), 0, Math.floor(Math.random()*myWorld.tilesDeep));				
				myWorld.addAsset(asset, addTo);
				asset.movieClip.gotoAndPlay(1);
				asset.movieClip.stop();
			}
			
			public function updateRenderedStructures(os:OwnedStructure, method:String):void
			{
				var asset:ActiveAsset = myWorld.findAssetByThinger(os);
				if (method == "sell")
				{
					myWorld.assetRenderer.removeAsset(asset);
				}
				if (method == "save_placement")
				{
					myWorld.updateAssetCoords(asset, new Point3D(os.x, os.y, os.z));
				}
			}							
		]]>
	</mx:Script>	
</mx:Canvas>
