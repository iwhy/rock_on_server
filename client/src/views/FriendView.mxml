<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="760" height="610" creationComplete="onCreationComplete()">
	<mx:Script>
		<![CDATA[
			import controllers.CreatureController;
			import controllers.DwellingController;
			import controllers.LayerableController;
			import controllers.LevelController;
			import controllers.StoreController;
			import controllers.StructureController;
			import controllers.ThingerController;
			import controllers.UserController;
			
			import flash.utils.getTimer;
			
			import game.GameMagicManager;
			
			import helpers.CreatureGenerator;
			
			import models.Creature;
			import models.OwnedLayerable;
			import models.OwnedStructure;
			import models.OwnedThinger;
			import models.Store;
			import models.StoreOwnedThinger;
			import models.Structure;
			import models.Thinger;
			import models.User;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Text;
			import mx.core.Application;
			import mx.core.UIComponent;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			
			import rock_on.BandMember;
			import rock_on.BandMemberManager;
			import rock_on.Booth;
			import rock_on.BoothBoss;
			import rock_on.ConcertStage;
			import rock_on.ContentIndex;
			import rock_on.CustomerPerson;
			import rock_on.CustomerPersonManager;
			import rock_on.GroupieBoss;
			import rock_on.ListeningStationBoss;
			import rock_on.Person;
			import rock_on.StageManager;
			
			import stores.StoreEvent;
			
			import user.UserEvent;
			
			import world.ActiveAsset;
			import world.AssetStack;
			import world.BitmapBlotter;
			import world.Point3D;
			import world.World;
			import world.WorldEvent;	

			public var myWorld:World;
			[Bindable] public var wbi:WorldBitmapInterface;
			[Bindable] public var myUser:User;
			
			public var inventoryCanvas:Canvas;
			public var inventoryIndex:int = 0;
			public var editMode:EditMode;
			public var editModeActivated:Boolean = false;
			public var booths:ArrayCollection;
			public var stages:ArrayCollection;
			public var customerPersonManager:CustomerPersonManager;
			public var bandMemberManager:BandMemberManager;
			public var concertStage:ConcertStage;
			public var boothBoss:BoothBoss;
			
			public var creditsBox:Text;
			
			[Bindable] public var layerableController:LayerableController;
			[Bindable] public var structureController:StructureController;
			[Bindable] public var storeController:StoreController;
			[Bindable] public var creatureController:CreatureController;
			[Bindable] public var thingerController:ThingerController;
			[Bindable] public var userController:UserController;
			[Bindable] public var levelController:LevelController;
			[Bindable] public var dwellingController:DwellingController;
			
			[Bindable] public var stageManager:StageManager;
			[Bindable] public var creatureGenerator:CreatureGenerator;
			[Bindable] public var listeningStationBoss:ListeningStationBoss;
			[Bindable] public var venueManager:VenueManager;
			[Bindable] public var bandBoss:BandBoss;
			[Bindable] public var groupieBoss:GroupieBoss;
			
			public var viewInitialized:Boolean;
			public var bitmapBlotter:BitmapBlotter;
			
			[Bindable] public var myMemory:Number;
			[Bindable] public var fps:Number;
			[Bindable] public var aux:Number;	
			public var lastTime:Number;	
					
			private function onCreationComplete():void
			{
				addEventListener(Event.ENTER_FRAME, onEnterFrame);
				myWorld = new World(800, 800, 40);				
				addChild(myWorld);	
				
				var evt:DynamicEvent = new DynamicEvent("worldAdded", true, true);
				dispatchEvent(evt);
			}
			
			public function cleanAndReset():void
			{
				if (myWorld)
				{
					removeChild(myWorld);				
					tearDown();
				}
				myWorld = new World(800, 800, 40);				
				addChild(myWorld);				
			}
			
			public function tearDown():void
			{
				groupieBoss.tearDown();
				stageManager.tearDown();
				boothBoss.tearDown();
				listeningStationBoss.tearDown();
				creatureGenerator = null;
				killManagers();
			}
			
			public function startFriendMirror():void
			{			
				cleanAndReset();
				
				addStage();
				generateManagers();
				initializeVenue();
									
				showBooths();
				showListeningStations();
				showGroupies();				
			}
			
			private function initializeVenue():void
			{
				venueManager.getVenue();
				
				boothBoss.venue = venueManager.venue;
				listeningStationBoss.venue = venueManager.venue;
				customerPersonManager.venue = venueManager.venue;
			}			
			
			private function generateManagers():void
			{
				venueManager = new VenueManager(wbi, structureController, layerableController, dwellingController, levelController, creatureController, myWorld);
			}	
			
			private function killManagers():void
			{
				listeningStationBoss = null;
				groupieBoss = null;
				bandBoss = null;
				venueManager = null;
				boothBoss = null;
				stageManager = null;
			}
			
			private function onEnterFrame(evt:Event):void
			{
				var time:Number = getTimer();
				var deltaTime:Number = time - lastTime;
				var lockedDelta:Number = Math.min(100, deltaTime);
				fps = 1000/deltaTime;
				myMemory = System.totalMemory;
				lastTime = time;
				customerPersonManager.update(lockedDelta);
				bandMemberManager.update(lockedDelta);
			}
			
			public function onUserLoaded():void
			{				
			}
			
			private function onStructurePlaced(evt:DynamicEvent):void
			{
				thingerController.saveStructurePlacement(evt.asset, evt.currentPoint);
			}
			
			private function onWorldClicked(evt:MouseEvent):void
			{
				if (evt.target is BandMember)
				{
				}
				else if (evt.target is CustomerPerson)
				{
					if (((evt.target as ActiveAsset).thinger as Creature).type == "Groupie")
					{
						Alert.show("I'm a Groupie!");
					}
					else 
					{
						Alert.show("Not a Groupie!");
					}
				}
			}
			
			public function showBooths():void
			{
				boothBoss.friendMirror = true;
				boothBoss.setInMotion();
			}
			
			public function addStage():void
			{	
				stageManager = new StageManager(structureController, myWorld);
				stageManager.setInMotion();
				concertStage = stageManager.concertStage;		
			}
			
			private function showListeningStations():void
			{
				listeningStationBoss.friendMirror = true;
				listeningStationBoss.setInMotion();	
				
				listeningStationBoss.boothBoss = boothBoss;
				listeningStationBoss.stageManager = stageManager;				
				listeningStationBoss.customerPersonManager = customerPersonManager;			
			}			
			
			public function showGroupies():void
			{	
				// Creating ActiveAssets 2x as much as necessary here...
				
				groupieBoss.friendMirror = true;
				groupieBoss.setInMotion();
			}
			
			public function showBandMembers():void
			{
//				var bandMembers:ArrayCollection = creatureController.getConstructedCreaturesByType("BandMember", 1, 1);
//				
//				for each (var assetStack:AssetStack in bandMembers)
//				{
//					var bandMember:BandMember = new BandMember(assetStack.movieClipStack, assetStack.layerableOrder, assetStack.creature, 0.4);
//					bandMember.concertStage = concertStage;
//					bandMember.addExemptStructures();
//					bandMember.speed = 0.06;
//					bandMemberManager.add(bandMember);
//				}
				bandBoss.friendMirror = true;
			}			
			
			private function addStaticAsset(asset:ActiveAsset, addTo:Point3D):void
			{
				myWorld.addAsset(asset, addTo);
				asset.movieClip.gotoAndPlay(1);
				asset.movieClip.stop();
			}
			
		]]>
	</mx:Script>	
	
</mx:Canvas>
