<?xml version="1.0" encoding="utf-8"?>
<views:WorldView xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:views="views.*" width="1000" height="1000" creationComplete="onCreationComplete()" verticalScrollPolicy="off" horizontalScrollPolicy="off">
	<mx:Script>
		<![CDATA[
			import controllers.CreatureController;
			import controllers.DwellingController;
			import controllers.LayerableController;
			import controllers.LevelController;
			import controllers.StoreController;
			import controllers.StructureController;
			import controllers.ThingerController;
			import controllers.UserController;
			
			import flash.utils.getTimer;
			
			import game.GameMagicManager;
			
			import helpers.CreatureGenerator;
			
			import models.Creature;
			import models.OwnedLayerable;
			import models.OwnedStructure;
			import models.OwnedThinger;
			import models.Store;
			import models.StoreOwnedThinger;
			import models.Structure;
			import models.Thinger;
			import models.User;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Text;
			import mx.core.Application;
			import mx.core.UIComponent;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			
			import rock_on.BandMember;
			import rock_on.BandMemberManager;
			import rock_on.Booth;
			import rock_on.BoothBoss;
			import rock_on.ConcertStage;
			import rock_on.ContentIndex;
			import rock_on.CustomerPerson;
			import rock_on.CustomerPersonManager;
			import rock_on.GroupieBoss;
			import rock_on.ListeningStationBoss;
			import rock_on.Person;
			import rock_on.StageManager;
			
			import stores.StoreEvent;
			
			import user.UserEvent;
			
			import world.ActiveAsset;
			import world.AssetStack;
			import world.BitmapBlotter;
			import world.Point3D;
			import world.World;
			import world.WorldEvent;	
						
			public static var worldWidth:int = 1200;
			public static var worldHeight:int = 1200;
			public static var tileSize:int = 40;
			
			public var venueLoaded:Boolean;
			public var layerablesLoaded:Boolean;
			
			private function onCreationComplete():void
			{
				viewReference = this;
				addEventListener(Event.ENTER_FRAME, onEnterFrame);
				addEventListener(MouseEvent.MOUSE_DOWN, function onMouseDown():void
				{
					wbi.handleMouseDown(viewReference);
				});	
				this.doubleClickEnabled = true;
				addEventListener(MouseEvent.DOUBLE_CLICK, onViewDoubleClicked);				
				addEventListener(MouseEvent.CLICK, onViewClicked);	
			}
			
			private function onViewClicked(evt:MouseEvent):void
			{
				wbi.onWorldViewClicked(evt);
			}

			private function onViewDoubleClicked(evt:MouseEvent):void
			{
//				wbi.onWorldViewDoubleClicked(evt);
			}
			
			public function cleanAndReset():void
			{
				if (myWorld)
				{
					removeChild(myWorld);				
					tearDown();
				}
				myWorld = new World(800, 800, 40);				
				addChild(myWorld);				
			}
			
			public function tearDown():void
			{
				groupieBoss.tearDown();
				stageManager.tearDown();
				boothBoss.tearDown();
				listeningStationBoss.tearDown();
				creatureGenerator = null;
				killManagers();
			}			
			
			private function generateManagers():void
			{
				venueManager = new VenueManager(wbi, structureController, layerableController, dwellingController, levelController, creatureController, usableController, myWorld);
			}	
			
			private function killManagers():void
			{
				listeningStationBoss = null;
				groupieBoss = null;
				bandBoss = null;
				venueManager = null;
				boothBoss = null;
				stageManager = null;
			}
			
			override public function onEnterFrame(evt:Event):void
			{
				var time:Number = getTimer();
				var deltaTime:Number = time - lastTime;
				var lockedDelta:Number = Math.min(100, deltaTime);
				fps = 1000/deltaTime;
				myMemory = System.totalMemory;
				lastTime = time;
				
				if (wbi)
				{
					wbi.handleEnterFrameEvents(viewReference, stageView);			
				}				
			}
			
			public function onUserLoaded():void
			{				
			}
			
			private function onStructurePlaced(evt:DynamicEvent):void
			{
				thingerController.saveStructurePlacement(evt.asset, evt.currentPoint);
			}
			
			private function onWorldClicked(evt:MouseEvent):void
			{
				if (evt.target is BandMember)
				{
				}
				else if (evt.target is CustomerPerson)
				{
					if (((evt.target as ActiveAsset).thinger as Creature).type == "Groupie")
					{
						Alert.show("I'm a Groupie!");
					}
					else 
					{
						Alert.show("Not a Groupie!");
					}
				}
			}
			
			public function showBooths():void
			{
				boothBoss.friendMirror = true;
				boothBoss.setInMotion();
			}
			
			public function addStage():void
			{	
				stageManager = new StageManager(structureController, myWorld);
				stageManager.setInMotion();
				concertStage = stageManager.concertStage;		
			}
			
			private function showListeningStations():void
			{
				listeningStationBoss.friendMirror = true;
				listeningStationBoss.setInMotion();	
				
				listeningStationBoss.boothBoss = boothBoss;
				listeningStationBoss.stageManager = stageManager;				
				listeningStationBoss.customerPersonManager = customerPersonManager;			
			}			
			
			public function showGroupies():void
			{	
				// Creating ActiveAssets 2x as much as necessary here...
				
				groupieBoss.friendMirror = true;
				groupieBoss.setInMotion();
			}
			
			public function showBandMembers():void
			{
				//				var bandMembers:ArrayCollection = creatureController.getConstructedCreaturesByType("BandMember", 1, 1);
				//				
				//				for each (var assetStack:AssetStack in bandMembers)
				//				{
				//					var bandMember:BandMember = new BandMember(assetStack.movieClipStack, assetStack.layerableOrder, assetStack.creature, 0.4);
				//					bandMember.concertStage = concertStage;
				//					bandMember.addExemptStructures();
				//					bandMember.speed = 0.06;
				//					bandMemberManager.add(bandMember);
				//				}
				bandBoss.friendMirror = true;
			}			
			
			private function addStaticAsset(asset:ActiveAsset, addTo:Point3D):void
			{
				myWorld.addAsset(asset, addTo);
				asset.movieClip.gotoAndPlay(1);
				asset.movieClip.stop();
			}
			
		]]>
	</mx:Script>		
</views:WorldView>
