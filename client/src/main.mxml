<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" xmlns:world="world.*" xmlns:views="views.*" preinitialize="onPreInitialize()" applicationComplete="onApplicationComplete()">
	<mx:states>
		<mx:State name="topBar">
			<mx:AddChild position="after">
				<views:TopBar id="topBarView" myUser="{gdi.user}" editView="{editView}" worldView="{worldView}" userManager="{gdi.userManager}" storeManager="{gdi.storeManager}" levelManager="{gdi.levelManager}"/>
			</mx:AddChild>
			<mx:AddChild position="after">
				<views:BottomBar id="bottomBarView" myUser="{gdi.user}" editView="{editView}" worldView="{worldView}" userManager="{gdi.userManager}" friendManager="{friendManager}" levelManager="{gdi.levelManager}" storeManager="{gdi.storeManager}" thingerManager="{gdi.thingerManager}"/>
			</mx:AddChild>
			<mx:AddChild position="after">
				<views:UILayer id="uiLayer"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="stageViewer" basedOn="worldView">
			<mx:AddChild position="before" relativeTo="worldView">
				<views:StageView id="stageView" customerPersonManager="{worldView.customerPersonManager}" creatureManager="{gdi.creatureManager}" structureManager="{gdi.structureManager}" boothManager="{worldView.boothManager}"/>
			</mx:AddChild>			
		</mx:State>
		<mx:State name="worldView" basedOn="topBar">
			<mx:AddChild position="after">
				<views:WorldView id="worldView" bottomBar="{bottomBarView}" stageView="{stageView}" myUser="{gdi.user}" gameMagicManager="{gameMagicManager}" userManager="{gdi.userManager}" thingerManager="{gdi.thingerManager}" storeManager="{gdi.storeManager}" creatureManager="{gdi.creatureManager}" structureManager="{gdi.structureManager}" layerableManager="{gdi.layerableManager}" dwellingManager="{gdi.dwellingManager}" levelManager="{gdi.levelManager}" stageManager="{stageView.stageManager}" concertStage="{stageView.concertStage}" bandManager="{stageView.bandManager}"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="friendView" basedOn="topBar">
			<mx:AddChild>
				<views:FriendView id="friendView"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="editView" basedOn="topBar">
			<mx:AddChild>
				<views:EditView id="editView" myUser="{gdi.user}" stageView="{stageView}" userManager="{gdi.userManager}" thingerManager="{gdi.thingerManager}" storeManager="{gdi.storeManager}" creatureManager="{gdi.creatureManager}" structureManager="{gdi.structureManager}" layerableManager="{gdi.layerableManager}" boothManager="{worldView.boothManager}" venueManager="{worldView.venueManager}" dwellingManager="{gdi.dwellingManager}"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="twoDimensional">
			<mx:AddChild>
				<views:TwoDimensionalView id="twoDimensionalView" />
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:Script>
		<![CDATA[
			import com.facebook.data.users.FacebookUser;
			import mx.events.CollectionEvent;
			import controllers.CreatureManager;
			import world.AssetStack;
			import models.OwnedLayerable;
			import mx.events.StateChangeEvent;
			import game.ImposterOwnedStructure;
			import world.ActiveAsset;
			import stores.StoreEvent;
			import models.User;
			import models.OwnedStructure;
			import models.OwnedDwelling;
			import rock_on.ContentIndex;
			import game.GameMagicManager;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			import controllers.FriendManager;
			import com.facebook.events.FacebookEvent;
			import facebook.FacebookFunTime;
			import user.UserEvent;
			import models.Creature;
			import views.CreatureCustomizer;
			import server.ServerDataEvent;
			import game.GameDataInterface;
			import server.ServerController;
						
			[Bindable] public var gdi:GameDataInterface;
			[Bindable] public var loadedModels:Dictionary;
			[Bindable] public var xGridCoord:Number;
			[Bindable] public var yGridCoord:Number;
			[Bindable] public var gameMagicManager:GameMagicManager;
			
			public var facebookInterface:FacebookFunTime;
			[Bindable] public var friendManager:FriendManager;
			public var gameContent:Dictionary;
			public var userLoaded:Boolean;
			public var friendsLoaded:Boolean;
			public var facebookDataLoaded:Boolean;
			
			private function onPreInitialize():void
			{
				Security.allowDomain("*"); 	
				
				gdi = new GameDataInterface();
				
				gdi.addEventListener(ServerDataEvent.USER_LOADED, onUserLoaded);
				gdi.addEventListener(ServerDataEvent.GAME_CONTENT_LOADED, onGameContentLoaded);
				gdi.addEventListener(ServerDataEvent.USER_CONTENT_LOADED, onUserContentLoaded);	
				gdi.addEventListener(ServerDataEvent.UPDATE_COMPLETE, onUpdateComplete);
				
				initializeFriendManager();
				
				gameMagicManager = new GameMagicManager(gdi.levelManager, gdi.userManager);

//				Call when in non-Facebook test mode
				
//				onFacebookUserLoaded(202357);
			}
			private function initializeFriendManager():void
			{
				friendManager = new FriendManager(gdi);	
				friendManager.addEventListener("friendDataLoaded", onFriendDataLoaded);				
			}	
			private function onApplicationComplete():void
			{
				initializeFacebookInterface();				
				currentState = "stageViewer";
				gdi.storeManager.addEventListener(StoreEvent.THINGER_PURCHASED, onThingerPurchased);
			}
			private function initializeFacebookInterface():void
			{
				facebookInterface = new FacebookFunTime();
				addEventListener("facebookDataLoaded", onFacebookDataLoaded);				
			}
			public function onFacebookUserLoaded(uid:int, evt:FacebookEvent):void
			{
				gdi.getStaticGameContent();
				gdi.getUserContent(uid);
			}
			
// 			Only for non-Facebook version
			
//			public function onFacebookUserLoaded(uid:int):void
//			{
//				gdi.getStaticGameContent();
//				gdi.getUserContent(uid);
//			}
			
//			Only for non-Facebook version			
			
			public function onFacebookDataLoaded(evt:DynamicEvent):void
			{
				facebookDataLoaded = true;
				friendManager.setFacebookData(evt.facebookFriends, evt.facebookUser);
				getBasicFriendInfo();
			}
			public function onFriendDataLoaded(evt:DynamicEvent):void
			{
				friendsLoaded = true;
				bottomBarView.friendDataLoaded(evt);
			}
			public function getBasicFriendInfo():void
			{
				if (userLoaded && facebookDataLoaded)
				{
					friendManager.getFriendGDIs();								
				}
			}
			public function getFriendData(uid:int):void
			{
				friendManager.getFriendData(uid);
			}
			public function setGameContent():void
			{
				gameContent = new Dictionary();
				gameContent["structures"] = gdi.structureManager.structures;
				gameContent["layerables"] = gdi.layerableManager.layerables;
				gameContent["stores"] = gdi.storeManager.stores;
				gameContent["essentialModelReference"] = gdi.essentialModelManager.essentialModelReference;
			}
			public function attemptToInitializeVenueForUser():void
			{
				if (!userLoaded)
				{
					userLoaded = true;
					stageView.setInMotion();
					worldView.setInMotion();	
					getBasicFriendInfo();			
				}
			}
			public function friendGDILoaded(friendGDI:GameDataInterface):void
			{
				friendManager.friendGDILoaded(friendGDI);
			}
			public function attemptToShowFriendVenue(friendGDI:GameDataInterface):void
			{
				currentState = "friendView";
				friendView.myUser = friendGDI.user;
				friendView.userManager = friendGDI.userManager;
				friendView.structureManager = friendGDI.structureManager;
				friendView.layerableManager = friendGDI.layerableManager;
				friendView.creatureManager = friendGDI.creatureManager;
				friendView.levelManager = friendGDI.levelManager;
				friendView.dwellingManager = friendGDI.dwellingManager;				
				friendView.addEventListener("worldAdded", onFriendViewWorldAdded);
			}
			private function onFriendViewWorldAdded(evt:DynamicEvent):void
			{
				friendView.removeEventListener("worldAdded", onFriendViewWorldAdded);
				friendView.startFriendMirror();		
			}
			public function showFriendVenuePostLoad(friendGDI:GameDataInterface):void
			{
				currentState = "friendView";
				friendView.myUser = friendGDI.user;
				friendView.userManager = friendGDI.userManager;
				friendView.structureManager = friendGDI.structureManager;
				friendView.layerableManager = friendGDI.layerableManager;
				friendView.creatureManager = friendGDI.creatureManager;	
				friendView.levelManager = friendGDI.levelManager;				
				friendView.dwellingManager = friendGDI.dwellingManager;				
				friendView.startFriendMirror();				
			}
			public function instancesLoadedForGameUser():void
			{
//				worldView.myWorld.addEventListener(UserEvent.THINGER_PURCHASED, onWorldThingerPurchased);				
			}
			public function instancesLoadedForFriend():void
			{
				
			}
			private function onUserLoaded(evt:ServerDataEvent):void
			{
				worldView.onUserLoaded();
				topBarView.onUserLoaded();
				bottomBarView.onUserLoaded();				
			}
			private function onGameContentLoaded(evt:ServerDataEvent):void
			{

			}
			private function onUserContentLoaded(evt:ServerDataEvent):void
			{
				setGameContent();
				gdi.checkIfLoadingAndInstantiationComplete();				
			}
			public function onCreatureToCustomize(creature:Creature):void
			{
				currentState = 'twoDimensional';
				twoDimensionalView.removeAllChildren();
				
				var creatureCustomizer:CreatureCustomizer = gdi.creatureManager.generateCreatureCustomizer(creature);
				creatureCustomizer.x = 0;
				creatureCustomizer.y = 500;
				twoDimensionalView.addChild(creatureCustomizer);
			}
			private function onWorldThingerPurchased(evt:UserEvent):void
			{
				gdi.userManager.incrementCredits(evt.creditsToAdd);
			}
			private function onUpdateComplete(evt:ServerDataEvent):void
			{
				var instance:Object = evt.params;
				
				if (evt.model == "owned_dwelling")
				{
					checkForUpdatedVenue(instance as OwnedDwelling, evt.method);				
				}
				if (evt.model == "owned_structure")
				{
					updateOwnedStructurePostServer(instance as OwnedStructure, evt.method);
				}
				if (evt.model == "owned_layerable")
				{
					updateOwnedLayerablePostServer(instance as OwnedLayerable, evt.method);
				}
				if (evt.model == "user")
				{
					if (evt.method == "get_friend_basics")
					{	
						friendManager.processBasicFriendData(instance as User, evt.method);
					}
					else
					{
						gdi.user.updateUserOnServerResponse(instance as User, evt.method);
						gdi.levelManager.setLevelOnUser(gdi.user);
					}
				}
			}
			private function updateOwnedStructurePostServer(os:OwnedStructure, method:String):void
			{
				gdi.structureManager.updateOwnedStructureOnServerResponse(os, method, worldView);
				worldView.updateRenderedStructures(os, method);
				
				if (editView)
				{
					editView.updateRenderedStructures(os, method);					
				}				
			}
			private function updateOwnedLayerablePostServer(ol:OwnedLayerable, method:String):void
			{
				var creature:Creature = gdi.creatureManager.getCreatureById(ol.creature_id);
				if (creature.type == "BandMember")
				{
					worldView.bandManager.bandMemberManager.updateRenderedBandMembers(ol, creature, method);
				}
				gdi.layerableManager.updateOwnedLayerableOnServerResponse(ol, method);
			}
			private function checkForUpdatedVenue(instance:OwnedDwelling, method:String):void
			{
				if (instance.id == worldView.venueManager.venue.id)
				{
					worldView.venueManager.onVenueUpdated(method, instance);
				}
			}
			private function onThingerPurchased(evt:StoreEvent):void
			{
				if (evt.thinger.structure)
				{
					var os:OwnedStructure = new ImposterOwnedStructure(evt.thinger);
					editView.pausedForStateCompletion = os;
					switchToEditView();
					if (editView.editMode)
					{
						var asset:ActiveAsset = editView.editMode.createPurchaseCopy(os);
						editView.pausedForStateCompletion = null;					
						editView.editMode.startMoveWithoutEditOptions(asset);
					}
				}
			}
			public function switchToEditView():void
			{
				currentState = "editView";
				editView.addEventListener("editViewCreated", onEditViewCreated);
			}
			private function onEditViewCreated(evt:DynamicEvent):void
			{
				if (editView.pausedForStateCompletion)
				{
					var asset:ActiveAsset = editView.editMode.createPurchaseCopy(editView.pausedForStateCompletion);
					editView.pausedForStateCompletion = null;					
					editView.editMode.startMoveWithoutEditOptions(asset);					
				}
			}
			
		]]>
	</mx:Script>
</mx:Application>