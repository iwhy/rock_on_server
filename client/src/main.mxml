<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" xmlns:world="world.*" xmlns:views="views.*" preinitialize="onPreInitialize()" applicationComplete="onApplicationComplete()">
	<mx:states>
		<mx:State name="topBar">
			<mx:AddChild position="after">
				<views:TopBar id="topBarView" myUser="{gdi.user}" editView="{this.editView}" worldView="{this.worldView}" userManager="{gdi.userManager}" storeManager="{gdi.storeManager}"/>
			</mx:AddChild>
			<mx:AddChild position="after">
				<views:BottomBar id="bottomBarView" myUser="{gdi.user}" userManager="{gdi.userManager}" storeManager="{gdi.storeManager}" thingerManager="{gdi.thingerManager}"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="worldView" basedOn="topBar">
			<mx:AddChild>
				<views:WorldView id="worldView" myUser="{gdi.user}" userManager="{gdi.userManager}" thingerManager="{gdi.thingerManager}" storeManager="{gdi.storeManager}" creatureManager="{gdi.creatureManager}" structureManager="{gdi.structureManager}" layerableManager="{gdi.layerableManager}"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="friendView" basedOn="topBar">
			<mx:AddChild>
				<views:FriendView id="friendView"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="editView" basedOn="topBar">
			<mx:AddChild>
				<views:EditView id="editView" myUser="{gdi.user}" userManager="{gdi.userManager}" thingerManager="{gdi.thingerManager}" storeManager="{gdi.storeManager}" creatureManager="{gdi.creatureManager}" structureManager="{gdi.structureManager}"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="twoDimensional">
			<mx:AddChild>
				<views:TwoDimensionalView id="twoDimensionalView" />
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:Script>
		<![CDATA[
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			import controllers.FriendManager;
			import com.facebook.events.FacebookEvent;
			import facebook.FacebookFunTime;
			import user.UserEvent;
			import models.Creature;
			import views.CreatureCustomizer;
			import server.ServerDataEvent;
			import game.GameDataInterface;
			import server.ServerController;
			
			[Bindable] public var gdi:GameDataInterface;
			[Bindable] public var loadedModels:Dictionary;
			[Bindable] public var xGridCoord:Number;
			[Bindable] public var yGridCoord:Number;
			public var facebookInterface:FacebookFunTime;
			public var friendManager:FriendManager;
			public var gameContent:Dictionary;
			
			private function onPreInitialize():void
			{
				Security.allowDomain("*"); 	
				
				gdi = new GameDataInterface();
				
				gdi.addEventListener(ServerDataEvent.USER_LOADED, onUserLoaded);
				gdi.addEventListener(ServerDataEvent.GAME_CONTENT_LOADED, onGameContentLoaded);
				gdi.addEventListener(ServerDataEvent.USER_CONTENT_LOADED, onUserContentLoaded);	
				
				friendManager = new FriendManager();		
			}
			private function onApplicationComplete():void
			{
				facebookInterface = new FacebookFunTime();
				currentState = 'worldView';
			}
			public function onFacebookUserLoaded(uid:int, evt:FacebookEvent):void
			{
				gdi.getStaticGameContent();
				gdi.getUserContent(uid);
			}
			public function getFriendData(uid:int):void
			{
				friendManager.getFriendData(uid);
			}
			public function setGameContent():void
			{
				gameContent = new Dictionary();
				gameContent["structures"] = gdi.structureManager.structures;
				gameContent["layerables"] = gdi.layerableManager.layerables;
				gameContent["stores"] = gdi.storeManager.stores;
				gameContent["essentialModelReference"] = gdi.essentialModelManager.essentialModelReference;
			}
			public function attemptToInitializeVenueForUser():void
			{
				worldView.showBooths();		
				worldView.addStage();								
			}
			public function attemptToShowFriendVenue(friendGDI:GameDataInterface):void
			{
				currentState = "friendView";
				friendView.myUser = friendGDI.user;
				friendView.userManager = friendGDI.userManager;
				friendView.structureManager = friendGDI.structureManager;
				friendView.layerableManager = friendGDI.layerableManager;
				friendView.creatureManager = friendGDI.creatureManager;				
				friendView.addEventListener("worldAdded", onFriendViewWorldAdded);
			}
			private function onFriendViewWorldAdded(evt:DynamicEvent):void
			{
				friendView.removeEventListener("worldAdded", onFriendViewWorldAdded);
				friendView.showBooths();
				friendView.addStage();				
			}
			public function showFriendVenuePostLoad(friendGDI:GameDataInterface):void
			{
				currentState = "friendView";
				friendView.myUser = friendGDI.user;
				friendView.userManager = friendGDI.userManager;
				friendView.structureManager = friendGDI.structureManager;
				friendView.layerableManager = friendGDI.layerableManager;
				friendView.creatureManager = friendGDI.creatureManager;					
				friendView.showBooths();
				friendView.addStage();				
			}
			public function instancesLoadedForGameUser():void
			{
				worldView.myWorld.addEventListener(UserEvent.THINGER_PURCHASED, onWorldThingerPurchased);				
			}
			public function instancesLoadedForFriend():void
			{
				
			}
			private function onUserLoaded(evt:ServerDataEvent):void
			{
				worldView.onUserLoaded();
				topBarView.onUserLoaded();
				bottomBarView.onUserLoaded();				
			}
			private function onGameContentLoaded(evt:ServerDataEvent):void
			{

			}
			private function onUserContentLoaded(evt:ServerDataEvent):void
			{
				setGameContent();
				gdi.checkIfLoadingAndInstantiationComplete();				
			}
			public function onCreatureToCustomize(creature:Creature):void
			{
				currentState = 'twoDimensional';
				twoDimensionalView.removeAllChildren();
				
				var creatureCustomizer:CreatureCustomizer = gdi.creatureManager.generateCreatureCustomizer(creature);
				creatureCustomizer.x = 0;
				creatureCustomizer.y = 500;
				twoDimensionalView.addChild(creatureCustomizer);
			}
			private function onWorldThingerPurchased(evt:UserEvent):void
			{
				gdi.userManager.incrementCredits(evt.creditsToAdd);
			}
		]]>
	</mx:Script>
</mx:Application>