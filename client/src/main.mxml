<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" xmlns:world="world.*" xmlns:views="views.*" preinitialize="onPreInitialize()" applicationComplete="onApplicationComplete()">
	<mx:states>
		<mx:State name="topBar">
			<mx:AddChild position="after">
				<views:TopBar id="topBarView" myUser="{gdi.user}" editView="{editView}" worldView="{worldView}" userController="{gdi.userController}" songController="{gdi.songController}" storeController="{gdi.storeController}" levelController="{gdi.levelController}"/>
			</mx:AddChild>
			<mx:AddChild position="after">
				<views:BottomBar id="bottomBarView" myUser="{gdi.user}" editView="{editView}" venueManager="{worldView.venueManager}" worldView="{worldView}" userController="{gdi.userController}" friendManager="{friendManager}" levelController="{gdi.levelController}" storeController="{gdi.storeController}" thingerController="{gdi.thingerController}"/>
			</mx:AddChild>
			<mx:AddChild position="after">
				<views:UILayer id="uiLayer"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="stageViewer" basedOn="worldView">
			<mx:AddChild position="before" relativeTo="worldView">
				<views:StageView id="stageView" bottomBar="{bottomBarView}" mouseBoss="{mouseBoss}" worldView="{worldView}" venueManager="{worldView.venueManager}" customerPersonManager="{worldView.customerPersonManager}" creatureController="{gdi.creatureController}" structureController="{gdi.structureController}" boothBoss="{worldView.boothBoss}"/>
			</mx:AddChild>			
		</mx:State>
		<mx:State name="worldView" basedOn="topBar">
			<mx:AddChild position="after">
				<views:WorldView id="worldView" bottomBar="{bottomBarView}" mouseBoss="{mouseBoss}" usableController="{gdi.usableController}" songController="{gdi.songController}" stageView="{stageView}" myUser="{gdi.user}" gameMagicManager="{gameMagicManager}" userController="{gdi.userController}" thingerController="{gdi.thingerController}" storeController="{gdi.storeController}" creatureController="{gdi.creatureController}" structureController="{gdi.structureController}" layerableController="{gdi.layerableController}" dwellingController="{gdi.dwellingController}" levelController="{gdi.levelController}" stageManager="{stageView.stageManager}" concertStage="{stageView.concertStage}" bandBoss="{stageView.bandBoss}"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="friendView" basedOn="topBar">
			<mx:AddChild>
				<views:FriendView id="friendView"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="friendStage" basedOn="friendView">
			<mx:AddChild position="before" relativeTo="friendView">
				<views:StageView id="friendStageView"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="editView" basedOn="topBar">
			<mx:AddChild>
				<views:EditView id="editView" myUser="{gdi.user}" stageView="{stageView}" worldOriginX="{worldView.myWorld.x}" worldOriginY="{worldView.myWorld.y}" userController="{gdi.userController}" thingerController="{gdi.thingerController}" storeController="{gdi.storeController}" creatureController="{gdi.creatureController}" structureController="{gdi.structureController}" layerableController="{gdi.layerableController}" boothBoss="{worldView.boothBoss}" venueManager="{worldView.venueManager}" dwellingController="{gdi.dwellingController}"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="twoDimensional">
			<mx:AddChild>
				<views:TwoDimensionalView id="twoDimensionalView" />
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:Script>
		<![CDATA[
			import clickhandlers.MouseBoss;
			import clickhandlers.StageViewClickHandler;
			import clickhandlers.UIBoss;
			import clickhandlers.WorldViewClickHandler;
			
			import com.facebook.data.users.FacebookUser;
			import com.facebook.events.FacebookEvent;
			
			import controllers.CreatureController;
			import controllers.EssentialEvent;
			import controllers.FriendController;
			
			import facebook.FacebookFunTime;
			
			import flash.utils.Proxy;
			
			import game.GameDataInterface;
			import game.GameMagicManager;
			import game.ImposterOwnedStructure;
			
			import models.Creature;
			import models.OwnedDwelling;
			import models.OwnedLayerable;
			import models.OwnedStructure;
			import models.StoreOwnedThinger;
			import models.User;
			
			import mx.events.CollectionEvent;
			import mx.events.DynamicEvent;
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			
			import rock_on.ContentIndex;
			
			import server.ServerController;
			import server.ServerDataEvent;
			
			import stores.StoreEvent;
			
			import user.UserEvent;
			
			import views.CreatureCustomizer;
			import views.WorldBitmapInterface;
			
			import world.ActiveAsset;
			import world.AssetStack;
			
			public var worldWidth:int = 1200;
			public var worldHeight:int = 1200;
			public var tileSize:int = 40;			
						
			[Bindable] public var gdi:GameDataInterface;
			[Bindable] public var mouseBoss:MouseBoss;
			[Bindable] public var uiBoss:UIBoss;
			[Bindable] public var loadedModels:Dictionary;
			[Bindable] public var xGridCoord:Number;
			[Bindable] public var yGridCoord:Number;
			[Bindable] public var gameMagicManager:GameMagicManager;
			[Bindable] public var friendManager:FriendController;
			
			public var facebookInterface:FacebookFunTime;
			public var gameContent:Dictionary;
			public var userLoaded:Boolean;
			public var friendsLoaded:Boolean;
			public var facebookDataLoaded:Boolean;
			public var venueLoaded:Boolean;
			public var layerablesLoaded:Boolean;
			
			private function onPreInitialize():void
			{
				Security.allowDomain("*"); 					
				
				gdi = new GameDataInterface();
				
				gdi.addEventListener(ServerDataEvent.USER_LOADED, onUserObjectLoaded);
				gdi.addEventListener(ServerDataEvent.GAME_CONTENT_LOADED, onGameContentLoaded);
				gdi.addEventListener(ServerDataEvent.USER_CONTENT_LOADED, onUserContentLoaded);	
				gdi.addEventListener(ServerDataEvent.UPDATE_COMPLETE, onUpdateComplete);
				
				initializeFriendManager();
				
				gameMagicManager = new GameMagicManager(gdi.levelController, gdi.userController);

//				Call when in non-Facebook test mode
				
//				onFacebookUserLoaded(202357);
			}
			private function initializeFriendManager():void
			{
				friendManager = new FriendController(gdi);	
				friendManager.addEventListener("friendDataLoaded", onFriendDataLoaded);				
			}	
			private function onApplicationComplete():void
			{
				initializeFacebookInterface();	
				addControllerListeners();
				currentState = "stageViewer";
				gdi.storeController.addEventListener(StoreEvent.THINGER_PURCHASED, onThingerPurchased);
				
				uiBoss = new UIBoss(worldView, stageView, bottomBarView);
				mouseBoss = new MouseBoss();
			}
			private function initializeFacebookInterface():void
			{
				facebookInterface = new FacebookFunTime();
				addEventListener("facebookDataLoaded", onFacebookDataLoaded);				
			}
			public function onFacebookUserLoaded(uid:int, evt:FacebookEvent):void
			{
				gdi.getStaticGameContent();
			}
			public function onGameContentLoaded(evt:ServerDataEvent):void
			{
				gdi.getUserContent(facebookInterface.snid);				
			}
			
// 			Only for non-Facebook version
			
//			public function onFacebookUserLoaded(uid:int):void
//			{
//				gdi.getStaticGameContent();
//				gdi.getUserContent(uid);
//			}
			
//			Only for non-Facebook version			
			
			public function onFacebookDataLoaded(evt:DynamicEvent):void
			{
				facebookDataLoaded = true;
				friendManager.setFacebookData(evt.facebookFriends, evt.facebookUser);
				getBasicFriendInfo();
			}
			public function onFriendDataLoaded(evt:DynamicEvent):void
			{
				trace("friend data loaded");
				friendsLoaded = true;
				bottomBarView.friendDataLoaded(evt);
				trace("bottom bar drawn");
			}
			public function getBasicFriendInfo():void
			{
				if (userLoaded && facebookDataLoaded)
					friendManager.getBasicFriendGDIs();							
			}
			public function getFriendData(uid:int):void
			{
				friendManager.getFriendData(uid);
			}
			public function setGameContent():void
			{
				gameContent = new Dictionary();
				gameContent["structures"] = gdi.structureController.structures;
				gameContent["layerables"] = gdi.layerableController.layerables;
				gameContent["stores"] = gdi.storeController.stores;
				gameContent["essentialModelReference"] = gdi.essentialModelController.essentialModelReference;
			}
			public function attemptToInitializeVenueForUser():void
			{
				if (!userLoaded)
				{
					userLoaded = true;
					worldView.initializeVenue();
					stageView.initializeStage();
					worldView.initializeWorld();
					worldView.initializeStructures();
					stageView.initializeStructures();
//					topBarView.onVenueLoaded();
//					getBasicFriendInfo();			
				}
			}
			public function attemptToPopulateVenueForUser():void
			{
				if (layerablesLoaded && venueLoaded)
				{
					worldView.initializeCreatures();
//					topBarView.onVenueLoaded();
					getBasicFriendInfo();				
				}
			}
			public function attemptToPopulateVenueForFriend():void
			{
				if (friendView.layerablesLoaded && friendView.venueLoaded)
					friendView.initializeCreatures();								
				}
			public function friendGDILoaded(friendGDI:GameDataInterface):void
			{
				friendManager.friendGDILoaded(friendGDI);
			}
			public function attemptToInitializeVenueForFriend(friendGDI:GameDataInterface):void
			{
				currentState = "friendStage";
				friendView.myUser = friendGDI.user;
				friendView.userController = friendGDI.userController;
				friendView.structureController = friendGDI.structureController;
				friendView.layerableController = friendGDI.layerableController;
				friendView.creatureController = friendGDI.creatureController;
				friendView.levelController = friendGDI.levelController;
				friendView.dwellingController = friendGDI.dwellingController;
				friendView.usableController  = friendGDI.usableController;
				friendView.addEventListener("worldAdded", onFriendViewWorldAdded);

				friendView.initializeVenue();
				friendStageView.venueManager = friendView.venueManager;
				friendStageView.initializeStage();
				friendView.stageView = friendStageView;
				friendView.stageManager = friendStageView.stageManager;
				friendView.initializeWorld();
				friendView.initializeStructures();
				friendStageView.initializeStructures();
			}
			private function onFriendViewWorldAdded(evt:DynamicEvent):void
			{
				friendView.removeEventListener("worldAdded", onFriendViewWorldAdded);
				friendView.initializeCreatures();	
			}
//			public function showFriendVenuePostLoad(friendGDI:GameDataInterface):void
//			{
//				currentState = "friendView";
//				friendView.wbi = new WorldBitmapInterface(friendView, friendStageView, null, null);
//				friendView.myUser = friendGDI.user;
//				friendView.userController = friendGDI.userController;
//				friendView.structureController = friendGDI.structureController;
//				friendView.layerableController = friendGDI.layerableController;
//				friendView.creatureController = friendGDI.creatureController;	
//				friendView.levelController = friendGDI.levelController;				
//				friendView.dwellingController = friendGDI.dwellingController;				
//				
//				friendView.initializeVenue();
//				friendStageView.initializeStage();
//				friendView.initializeWorld();
//				friendView.initializeStructures();
//				friendStageView.initializeStructures();				
//			}
			public function instancesLoadedForGameUser():void
			{

			}
			public function instancesLoadedForFriend():void
			{
				trace("instances loaded for friend");
			}
			private function onUserObjectLoaded(evt:ServerDataEvent):void
			{
				trace("user object loaded");
				topBarView.onUserObjectLoaded();
				bottomBarView.onUserObjectLoaded();		
				trace("bottom bar rendered");
			}
			private function onUserContentLoaded(evt:ServerDataEvent):void
			{
				setGameContent();
//				gdi.checkIfLoadingAndInstantiationComplete();				
			}
			public function onCreatureToCustomize(creature:Creature):void
			{
				currentState = 'twoDimensional';
				twoDimensionalView.removeAllChildren();
				
				var creatureCustomizer:CreatureCustomizer = gdi.creatureController.generateCreatureCustomizer(creature);
				creatureCustomizer.x = 0;
				creatureCustomizer.y = 500;
				twoDimensionalView.addChild(creatureCustomizer);
			}
			private function onWorldThingerPurchased(evt:UserEvent):void
			{
				gdi.userController.incrementCredits(evt.creditsToAdd);
			}
			private function onUpdateComplete(evt:ServerDataEvent):void
			{
				var instance:Object = evt.params;
				if (evt.key)
					instance.key = evt.key;
				
				if (evt.model == "owned_dwelling")
					checkForUpdatedVenue(instance as OwnedDwelling, evt.method);				
				if (evt.model == "owned_structure")
					updateOwnedStructurePostServer(instance, evt.method);
				if (evt.model == "owned_layerable")
					updateOwnedLayerablePostServer(instance as OwnedLayerable, evt.method);
				if (evt.model == "user")
				{
					if (evt.method == "get_friend_basics")
						friendManager.processBasicFriendData(instance as User, evt.method);
					else
					{
//						gdi.user.updateUserOnServerResponse(instance as User, evt.method);
						topBarView.updateTopbarInfo(gdi.user);
						gdi.levelController.setLevelOnUser(gdi.user);
					}
				}
			}
			private function updateOwnedStructurePostServer(structureObj:Object, method:String):void
			{
				var os:OwnedStructure = gdi.structureController.updateOwnedStructureOnServerResponse(structureObj, method, worldView.venueManager.venue);
				worldView.venueManager.venue.updateRenderedStructures(os, method);			
			}
			private function updateOwnedLayerablePostServer(ol:OwnedLayerable, method:String):void
			{
				var creature:Creature = gdi.creatureController.getCreatureById(ol.creature_id);
				if (creature.type == "BandMember")
					worldView.venueManager.venue.bandMemberManager.updateRenderedBandMembers(ol, creature, method);
				gdi.layerableController.updateOwnedLayerableOnServerResponse(ol, method);
			}
			private function checkForUpdatedVenue(instance:OwnedDwelling, method:String):void
			{
				if (instance.id == worldView.venueManager.venue.id)
					worldView.venueManager.onVenueUpdated(method, instance);
			}
			private function onThingerPurchased(evt:StoreEvent):void
			{
				if (evt.thinger.structure)
				{
					var ios:ImposterOwnedStructure = new ImposterOwnedStructure(evt.thinger);
					ios.sot = evt.thinger as StoreOwnedThinger;
					if (editView)
						editView.newStructureAdded(ios);
					else
						addStructureToEditView(ios);
				}
			}
			public function addFromInventory(item:Object):void
			{
				if (item is OwnedStructure)
					addStructureFromInventory(item as OwnedStructure);
				this.bottomBarView.removeInventoryItemRenderer(item);
			}
			public function addStructureFromInventory(os:OwnedStructure):void
			{
				if (currentState == "editView")
					editView.newStructureAdded(os);
				else
				{
					currentState = "editView";
					editView.addEventListener("editViewCreated", function addInventoryToEditView():void
					{
						editView.newStructureAdded(os);
					});
				}
			}
			public function addStructureToEditView(ios:ImposterOwnedStructure):void
			{
				currentState = "editView";
				editView.addEventListener("editViewCreated", function addNewStructureToEditView():void
				{
					editView.newStructureAdded(ios);
				});
			}	
			public function sellItem(item:Object):void
			{
				if (item is OwnedStructure)
					gdi.structureController.serverController.sendRequest({id: item.id}, "owned_structure", "sell");	
				this.bottomBarView.removeInventoryItemRenderer(item);
			}
			public function putInInventory(item:Object):void
			{
				this.bottomBarView.addInventoryItemRenderer(item);
			}
			private function addControllerListeners():void
			{
				gdi.essentialModelController.addEventListener(EssentialEvent.LOADING_AND_INSTANTIATION_COMPLETE, onLoadingAndInstantiationComplete);
				
				gdi.addEventListener(EssentialEvent.OWNED_SONGS_LOADED, onSongsLoaded);
				gdi.addEventListener(EssentialEvent.OWNED_STRUCTURES_LOADED, onStructuresLoaded);
				gdi.addEventListener(EssentialEvent.OWNED_LAYERABLES_LOADED, onLayerablesLoaded);
				gdi.addEventListener(EssentialEvent.OWNED_DWELLINGS_LOADED, onDwellingsLoaded);
				gdi.addEventListener(EssentialEvent.OWNED_USABLES_LOADED, onUsablesLoaded);
			}
			private function onLoadingAndInstantiationComplete(evt:EssentialEvent):void
			{
				if (isLoggedInUser(evt.user))
//				if (true)
					instancesLoadedForGameUser();				
				else
					instancesLoadedForFriend();
			}
			private function isLoggedInUser(checkUser:User):Boolean
			{
				if (facebookInterface.snid == checkUser.snid)
					return true;
				return false;
			}
			private function onSongsLoaded(evt:EssentialEvent):void
			{
				gdi.removeEventListener(EssentialEvent.OWNED_SONGS_LOADED, onSongsLoaded);
				if (isLoggedInUser(evt.user))
					topBarView.onSongsLoaded();	
			}	
			private function onStructuresLoaded(evt:EssentialEvent):void
			{
				gdi.removeEventListener(EssentialEvent.OWNED_STRUCTURES_LOADED, onStructuresLoaded);
				if (isLoggedInUser(evt.user) && evt.gdi.dwellingController.ownedDwellingsLoaded)
//				if (true)
				{
					attemptToInitializeVenueForUser();	
					venueLoaded = true;
					attemptToPopulateVenueForUser();
				}
				else if (isLoggedInUser(evt.user) && !evt.gdi.dwellingController.ownedDwellingsLoaded)
				{
//					throw new Error("Dwelling not set");
				}
				else
					friendGDILoaded(evt.gdi);
			}
			private function onUsablesLoaded(evt:EssentialEvent):void
			{
				gdi.removeEventListener(EssentialEvent.OWNED_USABLES_LOADED, onUsablesLoaded);
				if (isLoggedInUser(evt.user) && evt.gdi.usableController.fullyLoaded)
				{
//					Not really sure what should happen here yet
				}
				else if (isLoggedInUser(evt.user) && !evt.gdi.usableController.fullyLoaded)
				{
//					throw new Error("Dwelling not set");
				}			
			}
			private function onLayerablesLoaded(evt:EssentialEvent):void
			{
				gdi.removeEventListener(EssentialEvent.OWNED_LAYERABLES_LOADED, onLayerablesLoaded);
				layerablesLoaded = true;
				if (isLoggedInUser(evt.user) && venueLoaded)
					attemptToPopulateVenueForUser();
			}
			private function onDwellingsLoaded(evt:EssentialEvent):void
			{
				gdi.removeEventListener(EssentialEvent.OWNED_DWELLINGS_LOADED, onDwellingsLoaded);
				if (isLoggedInUser(evt.user) && evt.gdi.structureController.ownedStructuresLoaded)
				{
					attemptToInitializeVenueForUser();					
					venueLoaded = true;
					attemptToPopulateVenueForUser();
				}
			}
			
		]]>
	</mx:Script>
</mx:Application>